=begin
#Customer

#This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient

  class OfferContent
    attr_accessor :previous_fix_period_invoice_prorata_info

    attr_accessor :contract_billing_period_info

    attr_accessor :contract_click_info

    attr_accessor :contract_commitment_info

    attr_accessor :contract_discount_info

    attr_accessor :contract_money_info

    attr_accessor :contract_store_info

    attr_accessor :contract_bonus_info

    attr_accessor :contract_termination_reason_type

    attr_accessor :contract_termination_reason

    # Internal usage: Indicates if we have to notify you about VAT exemption.
    attr_accessor :notify_vat_exemption


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'previous_fix_period_invoice_prorata_info' => :'previousFixPeriodInvoiceProrataInfo',
        :'contract_billing_period_info' => :'contractBillingPeriodInfo',
        :'contract_click_info' => :'contractClickInfo',
        :'contract_commitment_info' => :'contractCommitmentInfo',
        :'contract_discount_info' => :'contractDiscountInfo',
        :'contract_money_info' => :'contractMoneyInfo',
        :'contract_store_info' => :'contractStoreInfo',
        :'contract_bonus_info' => :'contractBonusInfo',
        :'contract_termination_reason_type' => :'contractTerminationReasonType',
        :'contract_termination_reason' => :'contractTerminationReason',
        :'notify_vat_exemption' => :'notifyVatExemption'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'previous_fix_period_invoice_prorata_info' => :'PreviousFixPeriodInvoiceProrataInfo',
        :'contract_billing_period_info' => :'ContractBillingPeriodInfo',
        :'contract_click_info' => :'ContractClickInfo',
        :'contract_commitment_info' => :'ContractCommitmentInfo',
        :'contract_discount_info' => :'ContractDiscountInfo',
        :'contract_money_info' => :'ContractMoneyInfo',
        :'contract_store_info' => :'ContractStoreInfo',
        :'contract_bonus_info' => :'ContractBonusInfo',
        :'contract_termination_reason_type' => :'ContractTerminationReasonType',
        :'contract_termination_reason' => :'ContractTerminationReason',
        :'notify_vat_exemption' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'previousFixPeriodInvoiceProrataInfo')
        self.previous_fix_period_invoice_prorata_info = attributes[:'previousFixPeriodInvoiceProrataInfo']
      end

      if attributes.has_key?(:'contractBillingPeriodInfo')
        self.contract_billing_period_info = attributes[:'contractBillingPeriodInfo']
      end

      if attributes.has_key?(:'contractClickInfo')
        self.contract_click_info = attributes[:'contractClickInfo']
      end

      if attributes.has_key?(:'contractCommitmentInfo')
        self.contract_commitment_info = attributes[:'contractCommitmentInfo']
      end

      if attributes.has_key?(:'contractDiscountInfo')
        self.contract_discount_info = attributes[:'contractDiscountInfo']
      end

      if attributes.has_key?(:'contractMoneyInfo')
        self.contract_money_info = attributes[:'contractMoneyInfo']
      end

      if attributes.has_key?(:'contractStoreInfo')
        self.contract_store_info = attributes[:'contractStoreInfo']
      end

      if attributes.has_key?(:'contractBonusInfo')
        self.contract_bonus_info = attributes[:'contractBonusInfo']
      end

      if attributes.has_key?(:'contractTerminationReasonType')
        self.contract_termination_reason_type = attributes[:'contractTerminationReasonType']
      end

      if attributes.has_key?(:'contractTerminationReason')
        self.contract_termination_reason = attributes[:'contractTerminationReason']
      end

      if attributes.has_key?(:'notifyVatExemption')
        self.notify_vat_exemption = attributes[:'notifyVatExemption']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @previous_fix_period_invoice_prorata_info.nil?
        invalid_properties.push("invalid value for 'previous_fix_period_invoice_prorata_info', previous_fix_period_invoice_prorata_info cannot be nil.")
      end

      if @contract_billing_period_info.nil?
        invalid_properties.push("invalid value for 'contract_billing_period_info', contract_billing_period_info cannot be nil.")
      end

      if @contract_click_info.nil?
        invalid_properties.push("invalid value for 'contract_click_info', contract_click_info cannot be nil.")
      end

      if @contract_commitment_info.nil?
        invalid_properties.push("invalid value for 'contract_commitment_info', contract_commitment_info cannot be nil.")
      end

      if @contract_discount_info.nil?
        invalid_properties.push("invalid value for 'contract_discount_info', contract_discount_info cannot be nil.")
      end

      if @contract_money_info.nil?
        invalid_properties.push("invalid value for 'contract_money_info', contract_money_info cannot be nil.")
      end

      if @contract_store_info.nil?
        invalid_properties.push("invalid value for 'contract_store_info', contract_store_info cannot be nil.")
      end

      if @contract_bonus_info.nil?
        invalid_properties.push("invalid value for 'contract_bonus_info', contract_bonus_info cannot be nil.")
      end

      if @notify_vat_exemption.nil?
        invalid_properties.push("invalid value for 'notify_vat_exemption', notify_vat_exemption cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @previous_fix_period_invoice_prorata_info.nil?
      return false if @contract_billing_period_info.nil?
      return false if @contract_click_info.nil?
      return false if @contract_commitment_info.nil?
      return false if @contract_discount_info.nil?
      return false if @contract_money_info.nil?
      return false if @contract_store_info.nil?
      return false if @contract_bonus_info.nil?
      return false if @notify_vat_exemption.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          previous_fix_period_invoice_prorata_info == o.previous_fix_period_invoice_prorata_info &&
          contract_billing_period_info == o.contract_billing_period_info &&
          contract_click_info == o.contract_click_info &&
          contract_commitment_info == o.contract_commitment_info &&
          contract_discount_info == o.contract_discount_info &&
          contract_money_info == o.contract_money_info &&
          contract_store_info == o.contract_store_info &&
          contract_bonus_info == o.contract_bonus_info &&
          contract_termination_reason_type == o.contract_termination_reason_type &&
          contract_termination_reason == o.contract_termination_reason &&
          notify_vat_exemption == o.notify_vat_exemption
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [previous_fix_period_invoice_prorata_info, contract_billing_period_info, contract_click_info, contract_commitment_info, contract_discount_info, contract_money_info, contract_store_info, contract_bonus_info, contract_termination_reason_type, contract_termination_reason, notify_vat_exemption].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
