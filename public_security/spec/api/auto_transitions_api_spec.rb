=begin
#Marketplaces - Orders

#The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::AutoTransitionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AutoTransitionsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::AutoTransitionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AutoTransitionsApi' do
    it 'should create an instact of AutoTransitionsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::AutoTransitionsApi)
    end
  end

  # unit tests for configure_automatic_transitions
  # Configure new or existing automatic Order status transition
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'configure_automatic_transitions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_automatic_transitions
  # Get list of configured automatic Order status transitions
  # 
  # @param [Hash] opts the optional parameters
  # @return [AutomaticTransitionInfos]
  describe 'get_automatic_transitions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
