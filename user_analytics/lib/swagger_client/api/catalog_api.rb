=begin
#Catalogs

#This API allows you to manage your catalogs

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CatalogApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_catalog_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_change_catalog_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_change_catalog_column_user_name" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogApi.catalog_change_catalog_column_user_name" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogApi.catalog_change_catalog_column_user_name" if request.nil?
      # resource path
      local_var_path = "/{storeId}/catalogColumns/{columnId}/rename".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_change_catalog_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_expression(store_id, column_id, request, opts = {})
      catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_change_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_change_custom_column_expression" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogApi.catalog_change_custom_column_expression" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogApi.catalog_change_custom_column_expression" if request.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_change_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_change_custom_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_change_custom_column_user_name" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogApi.catalog_change_custom_column_user_name" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogApi.catalog_change_custom_column_user_name" if request.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns/{columnId}/rename".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_change_custom_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_compute_expression(store_id, request, opts = {})
      data, _status_code, _headers = catalog_compute_expression_with_http_info(store_id, request, opts)
      return data
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_compute_expression_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_compute_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_compute_expression" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogApi.catalog_compute_expression" if request.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns/computeExpression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_compute_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_delete_custom_column(store_id, column_id, opts = {})
      catalog_delete_custom_column_with_http_info(store_id, column_id, opts)
      return nil
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_delete_custom_column_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_delete_custom_column" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogApi.catalog_delete_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CatalogColumns]
    def catalog_get_catalog_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_catalog_columns_with_http_info(store_id, opts)
      return data
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogColumns, Fixnum, Hash)>] CatalogColumns data, response status code and response headers
    def catalog_get_catalog_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_catalog_columns" if store_id.nil?
      # resource path
      local_var_path = "/{storeId}/catalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CatalogColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Categories]
    def catalog_get_categories(store_id, accept_encoding, opts = {})
      data, _status_code, _headers = catalog_get_categories_with_http_info(store_id, accept_encoding, opts)
      return data
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Categories, Fixnum, Hash)>] Categories data, response status code and response headers
    def catalog_get_categories_with_http_info(store_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_categories ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_categories" if store_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling CatalogApi.catalog_get_categories" if accept_encoding.nil?
      # resource path
      local_var_path = "/{storeId}/categories".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Categories')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_get_custom_column_expression(store_id, column_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_custom_column_expression" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogApi.catalog_get_custom_column_expression" if column_id.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CustomColumns]
    def catalog_get_custom_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_columns_with_http_info(store_id, opts)
      return data
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumns, Fixnum, Hash)>] CustomColumns data, response status code and response headers
    def catalog_get_custom_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_custom_columns" if store_id.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def catalog_get_product(store_id, product_id, opts = {})
      data, _status_code, _headers = catalog_get_product_with_http_info(store_id, product_id, opts)
      return data
    end

    # Get product
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Fixnum, Hash)>] Product data, response status code and response headers
    def catalog_get_product_with_http_info(store_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_product" if store_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling CatalogApi.catalog_get_product" if product_id.nil?
      # resource path
      local_var_path = "/{storeId}/products/{productId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Product')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetProductsRequest] :request 
    # @return [Products]
    def catalog_get_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_products_with_http_info(store_id, opts)
      return data
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetProductsRequest] :request 
    # @return [Array<(Products, Fixnum, Hash)>] Products data, response status code and response headers
    def catalog_get_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_products ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_products" if store_id.nil?
      # resource path
      local_var_path = "/{storeId}/products".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Products')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get random product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of random product you want to get (default to 100)
    # @return [Products]
    def catalog_get_random_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_random_products_with_http_info(store_id, opts)
      return data
    end

    # Get random product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of random product you want to get
    # @return [Array<(Products, Fixnum, Hash)>] Products data, response status code and response headers
    def catalog_get_random_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_get_random_products ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_get_random_products" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling CatalogApi.catalog_get_random_products, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 25
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling CatalogApi.catalog_get_random_products, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = "/{storeId}/products/random".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Products')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_get_random_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_save_custom_column(store_id, column_id, request, opts = {})
      catalog_save_custom_column_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_save_custom_column_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.catalog_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.catalog_save_custom_column" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogApi.catalog_save_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogApi.catalog_save_custom_column" if request.nil?
      # resource path
      local_var_path = "/{storeId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#catalog_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [LastManualImportInputConfiguration]
    def importation_get_manual_update_last_input_config(store_id, opts = {})
      data, _status_code, _headers = importation_get_manual_update_last_input_config_with_http_info(store_id, opts)
      return data
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(LastManualImportInputConfiguration, Fixnum, Hash)>] LastManualImportInputConfiguration data, response status code and response headers
    def importation_get_manual_update_last_input_config_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogApi.importation_get_manual_update_last_input_config ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogApi.importation_get_manual_update_last_input_config" if store_id.nil?
      # resource path
      local_var_path = "/{storeId}/inputConfiguration".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LastManualImportInputConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogApi#importation_get_manual_update_last_input_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
