=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ExportsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Export orders
    # This will create a file with all your orders related to your filter
    # @param format The type of the file to export
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_orders(format, request, opts = {})
      export_orders_with_http_info(format, request, opts)
      return nil
    end

    # Export orders
    # This will create a file with all your orders related to your filter
    # @param format The type of the file to export
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_orders_with_http_info(format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExportsApi.export_orders ..."
      end
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling ExportsApi.export_orders" if format.nil?
      # verify enum value
      unless ['csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ExportsApi.export_orders" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/exportations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#export_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the order exportation list
    # 
    # @param page_number The page number you want to get
    # @param page_size The count of orders exportation you want to get
    # @param [Hash] opts the optional parameters
    # @return [OrderExportations]
    def get_order_exportations(page_number, page_size, opts = {})
      data, _status_code, _headers = get_order_exportations_with_http_info(page_number, page_size, opts)
      return data
    end

    # Get the order exportation list
    # 
    # @param page_number The page number you want to get
    # @param page_size The count of orders exportation you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderExportations, Fixnum, Hash)>] OrderExportations data, response status code and response headers
    def get_order_exportations_with_http_info(page_number, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ExportsApi.get_order_exportations ..."
      end
      # verify the required parameter 'page_number' is set
      fail ArgumentError, "Missing the required parameter 'page_number' when calling ExportsApi.get_order_exportations" if page_number.nil?
      if page_number < 1
        fail ArgumentError, 'invalid value for "page_number" when calling ExportsApi.get_order_exportations, must be greater than or equal to 1.'
      end

      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling ExportsApi.get_order_exportations" if page_size.nil?
      if page_size > 100
        fail ArgumentError, 'invalid value for "page_size" when calling ExportsApi.get_order_exportations, must be smaller than or equal to 100.'
      end

      if page_size < 25
        fail ArgumentError, 'invalid value for "page_size" when calling ExportsApi.get_order_exportations, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = "/v2/user/marketplaces/orders/exportations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = page_number
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderExportations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ExportsApi#get_order_exportations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
