=begin
#Analytics

#This API will help you to manage the tracking of your clicks and your sales, get reporting on this trackings and put in place rules based on this reporting to automatically optimize your channel catalogs. \\ Also, you will be able to consult the rule execution reporting. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class TrackingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get the latest clicks tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The click&#39;s count you want to get (default to 100)
    # @return [TrackedClicks]
    def get_store_tracked_clicks(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_clicks_with_http_info(store_id, opts)
      return data
    end

    # Get the latest clicks tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The click&#39;s count you want to get
    # @return [Array<(TrackedClicks, Fixnum, Hash)>] TrackedClicks data, response status code and response headers
    def get_store_tracked_clicks_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackingApi.get_store_tracked_clicks ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling TrackingApi.get_store_tracked_clicks" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling TrackingApi.get_store_tracked_clicks, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling TrackingApi.get_store_tracked_clicks, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/{storeId}/tracking/clicks".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedClicks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_store_tracked_clicks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest external orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The external order&#39;s count you want to get (default to 100)
    # @return [TrackedExternalOrders]
    def get_store_tracked_external_orders(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_external_orders_with_http_info(store_id, opts)
      return data
    end

    # Get the latest external orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The external order&#39;s count you want to get
    # @return [Array<(TrackedExternalOrders, Fixnum, Hash)>] TrackedExternalOrders data, response status code and response headers
    def get_store_tracked_external_orders_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackingApi.get_store_tracked_external_orders ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling TrackingApi.get_store_tracked_external_orders" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling TrackingApi.get_store_tracked_external_orders, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling TrackingApi.get_store_tracked_external_orders, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/{storeId}/tracking/externalorders".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedExternalOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_store_tracked_external_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The order&#39;s count you want to get (default to 100)
    # @return [TrackedOrders]
    def get_store_tracked_orders(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_orders_with_http_info(store_id, opts)
      return data
    end

    # Get the latest orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The order&#39;s count you want to get
    # @return [Array<(TrackedOrders, Fixnum, Hash)>] TrackedOrders data, response status code and response headers
    def get_store_tracked_orders_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackingApi.get_store_tracked_orders ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling TrackingApi.get_store_tracked_orders" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling TrackingApi.get_store_tracked_orders, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling TrackingApi.get_store_tracked_orders, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/{storeId}/tracking/orders".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_store_tracked_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store tracking synchronization status
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreTrackingStatus]
    def get_store_tracking_status(store_id, opts = {})
      data, _status_code, _headers = get_store_tracking_status_with_http_info(store_id, opts)
      return data
    end

    # Get store tracking synchronization status
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreTrackingStatus, Fixnum, Hash)>] StoreTrackingStatus data, response status code and response headers
    def get_store_tracking_status_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackingApi.get_store_tracking_status ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling TrackingApi.get_store_tracking_status" if store_id.nil?
      # resource path
      local_var_path = "/{storeId}/tracking/status".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreTrackingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_store_tracking_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Display the synchronization status of the clicks and orders
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
    # @param [Hash] opts the optional parameters
    # @return [TrackingStatus]
    def get_tracking_status(opts = {})
      data, _status_code, _headers = get_tracking_status_with_http_info(opts)
      return data
    end

    # Display the synchronization status of the clicks and orders
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrackingStatus, Fixnum, Hash)>] TrackingStatus data, response status code and response headers
    def get_tracking_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TrackingApi.get_tracking_status ..."
      end
      # resource path
      local_var_path = "/tracking/status".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TrackingApi#get_tracking_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
