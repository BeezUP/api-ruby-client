=begin
#Public - Security

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ChannelCatalogsProductsOverridesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a specific channel catalog product value override
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param channel_column_id The channel column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_channel_catalog_product_value_override(channel_catalog_id, product_id, channel_column_id, opts = {})
      delete_channel_catalog_product_value_override_with_http_info(channel_catalog_id, product_id, channel_column_id, opts)
      return nil
    end

    # Delete a specific channel catalog product value override
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param channel_column_id The channel column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_channel_catalog_product_value_override_with_http_info(channel_catalog_id, product_id, channel_column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsProductsOverridesApi.delete_channel_catalog_product_value_override ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsProductsOverridesApi.delete_channel_catalog_product_value_override" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling ChannelCatalogsProductsOverridesApi.delete_channel_catalog_product_value_override" if product_id.nil?
      # verify the required parameter 'channel_column_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_column_id' when calling ChannelCatalogsProductsOverridesApi.delete_channel_catalog_product_value_override" if channel_column_id.nil?
      # resource path
      local_var_path = "/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s).sub('{' + 'channelColumnId' + '}', channel_column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsProductsOverridesApi#delete_channel_catalog_product_value_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Override channel catalog product values
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def override_channel_catalog_product_overrides(channel_catalog_id, product_id, request, opts = {})
      override_channel_catalog_product_overrides_with_http_info(channel_catalog_id, product_id, request, opts)
      return nil
    end

    # Override channel catalog product values
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def override_channel_catalog_product_overrides_with_http_info(channel_catalog_id, product_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsProductsOverridesApi.override_channel_catalog_product_overrides ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsProductsOverridesApi.override_channel_catalog_product_overrides" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling ChannelCatalogsProductsOverridesApi.override_channel_catalog_product_overrides" if product_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ChannelCatalogsProductsOverridesApi.override_channel_catalog_product_overrides" if request.nil?
      # resource path
      local_var_path = "/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsProductsOverridesApi#override_channel_catalog_product_overrides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
