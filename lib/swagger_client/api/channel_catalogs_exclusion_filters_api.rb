=begin
#Public - Security

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ChannelCatalogsExclusionFiltersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Configure channel catalog exclusion filters
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_exclusion_filters(channel_catalog_id, request, opts = {})
      configure_channel_catalog_exclusion_filters_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Configure channel catalog exclusion filters
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_exclusion_filters_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsExclusionFiltersApi.configure_channel_catalog_exclusion_filters ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsExclusionFiltersApi.configure_channel_catalog_exclusion_filters" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ChannelCatalogsExclusionFiltersApi.configure_channel_catalog_exclusion_filters" if request.nil?
      # resource path
      local_var_path = "/user/channelCatalogs/{channelCatalogId}/exclusionFilters".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsExclusionFiltersApi#configure_channel_catalog_exclusion_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog exclusion filter operators
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<ExclusionFilterOperator>]
    def get_channel_catalog_exclusion_filter_operators(opts = {})
      data, _status_code, _headers = get_channel_catalog_exclusion_filter_operators_with_http_info(opts)
      return data
    end

    # Get channel catalog exclusion filter operators
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExclusionFilterOperator>, Fixnum, Hash)>] Array<ExclusionFilterOperator> data, response status code and response headers
    def get_channel_catalog_exclusion_filter_operators_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsExclusionFiltersApi.get_channel_catalog_exclusion_filter_operators ..."
      end
      # resource path
      local_var_path = "/user/channelCatalogs/exclusionFilterOperators".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExclusionFilterOperator>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsExclusionFiltersApi#get_channel_catalog_exclusion_filter_operators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
