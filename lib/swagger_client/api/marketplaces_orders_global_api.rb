=begin
#BeezUP API

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class MarketplacesOrdersGlobalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get current synchronization status between your marketplaces and BeezUP accounts
    # 
    # @param [Hash] opts the optional parameters
    # @return [AccountSynchronizations]
    def get_marketplace_accounts_synchronization(opts = {})
      data, _status_code, _headers = get_marketplace_accounts_synchronization_with_http_info(opts)
      return data
    end

    # Get current synchronization status between your marketplaces and BeezUP accounts
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountSynchronizations, Fixnum, Hash)>] AccountSynchronizations data, response status code and response headers
    def get_marketplace_accounts_synchronization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersGlobalApi.get_marketplace_accounts_synchronization ..."
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/status".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountSynchronizations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersGlobalApi#get_marketplace_accounts_synchronization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all actions you can do on the order API
    # 
    # @param [Hash] opts the optional parameters
    # @return [OrderIndex]
    def get_order_index(opts = {})
      data, _status_code, _headers = get_order_index_with_http_info(opts)
      return data
    end

    # Get all actions you can do on the order API
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderIndex, Fixnum, Hash)>] OrderIndex data, response status code and response headers
    def get_order_index_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersGlobalApi.get_order_index ..."
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderIndex')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersGlobalApi#get_order_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request to all your marketplaces
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_all(opts = {})
      harvest_all_with_http_info(opts)
      return nil
    end

    # Send harvest request to all your marketplaces
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesOrdersGlobalApi.harvest_all ..."
      end
      # resource path
      local_var_path = "/user/marketplaces/orders/harvest".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesOrdersGlobalApi#harvest_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
