=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class BeezUPApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Activate the user account
    # 
    # @param email_activation_id The email activation id received by email.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_user_account(email_activation_id, opts = {})
      activate_user_account_with_http_info(email_activation_id, opts)
      return nil
    end

    # Activate the user account
    # 
    # @param email_activation_id The email activation id received by email.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activate_user_account_with_http_info(email_activation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.activate_user_account ..."
      end
      # verify the required parameter 'email_activation_id' is set
      fail ArgumentError, "Missing the required parameter 'email_activation_id' when calling BeezUPApi.activate_user_account" if email_activation_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/activate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_activation_id)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#activate_user_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure Auto Import Interval
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_configure_auto_import_interval(store_id, request, opts = {})
      auto_configure_auto_import_interval_with_http_info(store_id, request, opts)
      return nil
    end

    # Configure Auto Import Interval
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_configure_auto_import_interval_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_configure_auto_import_interval ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_configure_auto_import_interval" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.auto_configure_auto_import_interval" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/scheduling/interval".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_configure_auto_import_interval\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_delete_auto_import(store_id, opts = {})
      auto_delete_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Delete Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_delete_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_delete_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_delete_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_delete_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the auto import configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [AutoImportConfiguration]
    def auto_get_auto_import_configuration(store_id, opts = {})
      data, _status_code, _headers = auto_get_auto_import_configuration_with_http_info(store_id, opts)
      return data
    end

    # Get the auto import configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutoImportConfiguration, Fixnum, Hash)>] AutoImportConfiguration data, response status code and response headers
    def auto_get_auto_import_configuration_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_get_auto_import_configuration ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_get_auto_import_configuration" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutoImportConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_get_auto_import_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_pause_auto_import(store_id, opts = {})
      auto_pause_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Pause Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_pause_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_pause_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_pause_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/pause".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_pause_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_resume_auto_import(store_id, opts = {})
      auto_resume_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Resume Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_resume_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_resume_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_resume_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/resume".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_resume_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure Auto Import Schedules
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_schedule_auto_import(store_id, request, opts = {})
      auto_schedule_auto_import_with_http_info(store_id, request, opts)
      return nil
    end

    # Configure Auto Import Schedules
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_schedule_auto_import_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_schedule_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_schedule_auto_import" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.auto_schedule_auto_import" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_schedule_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Auto Import Manually
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def auto_start_auto_import(store_id, opts = {})
      data, _status_code, _headers = auto_start_auto_import_with_http_info(store_id, opts)
      return data
    end

    # Start Auto Import Manually
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def auto_start_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.auto_start_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.auto_start_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/start".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#auto_start_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_catalog_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_change_catalog_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_change_catalog_column_user_name" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.catalog_change_catalog_column_user_name" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.catalog_change_catalog_column_user_name" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_change_catalog_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_expression(store_id, column_id, request, opts = {})
      catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_change_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_change_custom_column_expression" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.catalog_change_custom_column_expression" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.catalog_change_custom_column_expression" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_change_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_change_custom_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_change_custom_column_user_name" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.catalog_change_custom_column_user_name" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.catalog_change_custom_column_user_name" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_change_custom_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_compute_expression(store_id, request, opts = {})
      data, _status_code, _headers = catalog_compute_expression_with_http_info(store_id, request, opts)
      return data
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_compute_expression_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_compute_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_compute_expression" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.catalog_compute_expression" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/computeExpression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_compute_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_delete_custom_column(store_id, column_id, opts = {})
      catalog_delete_custom_column_with_http_info(store_id, column_id, opts)
      return nil
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_delete_custom_column_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_delete_custom_column" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.catalog_delete_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the BeezUP columns
    # Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPColumnConfiguration>]
    def catalog_get_beez_up_columns(opts = {})
      data, _status_code, _headers = catalog_get_beez_up_columns_with_http_info(opts)
      return data
    end

    # Get the BeezUP columns
    # Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPColumnConfiguration>, Fixnum, Hash)>] Array<BeezUPColumnConfiguration> data, response status code and response headers
    def catalog_get_beez_up_columns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_beez_up_columns ..."
      end
      # resource path
      local_var_path = "/v2/user/catalogs/beezupColumns".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPColumnConfiguration>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_beez_up_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CatalogColumns]
    def catalog_get_catalog_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_catalog_columns_with_http_info(store_id, opts)
      return data
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogColumns, Fixnum, Hash)>] CatalogColumns data, response status code and response headers
    def catalog_get_catalog_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_catalog_columns" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/catalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CatalogColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Categories]
    def catalog_get_categories(store_id, accept_encoding, opts = {})
      data, _status_code, _headers = catalog_get_categories_with_http_info(store_id, accept_encoding, opts)
      return data
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Categories, Fixnum, Hash)>] Categories data, response status code and response headers
    def catalog_get_categories_with_http_info(store_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_categories ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_categories" if store_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling BeezUPApi.catalog_get_categories" if accept_encoding.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/categories".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Categories')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_get_custom_column_expression(store_id, column_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_custom_column_expression" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.catalog_get_custom_column_expression" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CustomColumns]
    def catalog_get_custom_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_columns_with_http_info(store_id, opts)
      return data
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumns, Fixnum, Hash)>] CustomColumns data, response status code and response headers
    def catalog_get_custom_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_custom_columns" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def catalog_get_product(store_id, product_id, opts = {})
      data, _status_code, _headers = catalog_get_product_with_http_info(store_id, product_id, opts)
      return data
    end

    # Get product
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Fixnum, Hash)>] Product data, response status code and response headers
    def catalog_get_product_with_http_info(store_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_product" if store_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.catalog_get_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/products/{productId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Product')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetProductsRequest] :request 
    # @return [Products]
    def catalog_get_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_products_with_http_info(store_id, opts)
      return data
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetProductsRequest] :request 
    # @return [Array<(Products, Fixnum, Hash)>] Products data, response status code and response headers
    def catalog_get_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_products ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_products" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/products".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Products')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get random product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of random product you want to get (default to 100)
    # @return [Products]
    def catalog_get_random_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_random_products_with_http_info(store_id, opts)
      return data
    end

    # Get random product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of random product you want to get
    # @return [Array<(Products, Fixnum, Hash)>] Products data, response status code and response headers
    def catalog_get_random_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_get_random_products ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_get_random_products" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.catalog_get_random_products, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 25
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.catalog_get_random_products, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/products/random".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Products')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_get_random_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_save_custom_column(store_id, column_id, request, opts = {})
      catalog_save_custom_column_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_save_custom_column_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.catalog_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.catalog_save_custom_column" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.catalog_save_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.catalog_save_custom_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#catalog_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
    # @return [nil]
    def change_order(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts = {})
      change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts)
      return nil
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.change_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.change_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.change_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling BeezUPApi.change_order" if beez_up_order_id.nil?
      # verify the required parameter 'change_order_type' is set
      fail ArgumentError, "Missing the required parameter 'change_order_type' when calling BeezUPApi.change_order" if change_order_type.nil?
      # verify the required parameter 'user_name' is set
      fail ArgumentError, "Missing the required parameter 'user_name' when calling BeezUPApi.change_order" if user_name.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.change_order" if request.nil?
      # verify the required parameter 'if_match' is set
      fail ArgumentError, "Missing the required parameter 'if_match' when calling BeezUPApi.change_order" if if_match.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s).sub('{' + 'changeOrderType' + '}', change_order_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'userName'] = user_name
      query_params[:'testMode'] = opts[:'test_mode'] if !opts[:'test_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#change_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
    # @return [BatchOrderOperationResponse]
    def change_order_list(change_order_type, user_name, request, opts = {})
      data, _status_code, _headers = change_order_list_with_http_info(change_order_type, user_name, request, opts)
      return data
    end

    # Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
    # @return [Array<(BatchOrderOperationResponse, Fixnum, Hash)>] BatchOrderOperationResponse data, response status code and response headers
    def change_order_list_with_http_info(change_order_type, user_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.change_order_list ..."
      end
      # verify the required parameter 'change_order_type' is set
      fail ArgumentError, "Missing the required parameter 'change_order_type' when calling BeezUPApi.change_order_list" if change_order_type.nil?
      # verify the required parameter 'user_name' is set
      fail ArgumentError, "Missing the required parameter 'user_name' when calling BeezUPApi.change_order_list" if user_name.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.change_order_list" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}".sub('{format}','json').sub('{' + 'changeOrderType' + '}', change_order_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'userName'] = user_name
      query_params[:'testMode'] = opts[:'test_mode'] if !opts[:'test_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchOrderOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#change_order_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change user password
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def change_password(request, opts = {})
      change_password_with_http_info(request, opts)
      return nil
    end

    # Change user password
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_password_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.change_password ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.change_password" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/changePassword".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#change_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Clear an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.clear_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.clear_merchant_order_info" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.clear_merchant_order_info" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling BeezUPApi.clear_merchant_order_info" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#clear_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a batch of operations to clear an Order's merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BatchOrderOperationResponse]
    def clear_merchant_order_info_list(request, opts = {})
      data, _status_code, _headers = clear_merchant_order_info_list_with_http_info(request, opts)
      return data
    end

    # Send a batch of operations to clear an Order&#39;s merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchOrderOperationResponse, Fixnum, Hash)>] BatchOrderOperationResponse data, response status code and response headers
    def clear_merchant_order_info_list_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.clear_merchant_order_info_list ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.clear_merchant_order_info_list" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchOrderOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#clear_merchant_order_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure new or existing automatic Order status transition
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_automatic_transitions(request, opts = {})
      configure_automatic_transitions_with_http_info(request, opts)
      return nil
    end

    # Configure new or existing automatic Order status transition
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_automatic_transitions_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.configure_automatic_transitions ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.configure_automatic_transitions" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/automaticTransitions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#configure_automatic_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_cost_settings(channel_catalog_id, request, opts = {})
      configure_channel_catalog_cost_settings_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_cost_settings_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.configure_channel_catalog_cost_settings ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.configure_channel_catalog_cost_settings" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.configure_channel_catalog_cost_settings" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/settings/cost".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#configure_channel_catalog_cost_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure channel catalog exclusion filters
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_exclusion_filters(channel_catalog_id, request, opts = {})
      configure_channel_catalog_exclusion_filters_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Configure channel catalog exclusion filters
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_exclusion_filters_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.configure_channel_catalog_exclusion_filters ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.configure_channel_catalog_exclusion_filters" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.configure_channel_catalog_exclusion_filters" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#configure_channel_catalog_exclusion_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_general_settings(channel_catalog_id, request, opts = {})
      configure_channel_catalog_general_settings_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_general_settings_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.configure_channel_catalog_general_settings ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.configure_channel_catalog_general_settings" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.configure_channel_catalog_general_settings" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/settings/general".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#configure_channel_catalog_general_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new channel catalog
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def create_channel_catalog(request, opts = {})
      data, _status_code, _headers = create_channel_catalog_with_http_info(request, opts)
      return data
    end

    # Create a new channel catalog
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def create_channel_catalog_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.create_channel_catalog ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.create_channel_catalog" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#create_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new contract
    # Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BeezUPCommonInfoSummaries]
    def create_contract(request, opts = {})
      data, _status_code, _headers = create_contract_with_http_info(request, opts)
      return data
    end

    # Create a new contract
    # Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeezUPCommonInfoSummaries, Fixnum, Hash)>] BeezUPCommonInfoSummaries data, response status code and response headers
    def create_contract_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.create_contract ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.create_contract" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/contracts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeezUPCommonInfoSummaries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#create_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rule creation
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_rule(store_id, request, opts = {})
      create_rule_with_http_info(store_id, request, opts)
      return nil
    end

    # Rule creation
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_rule_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.create_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.create_rule" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.create_rule" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#create_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new store
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [LinksGetStoresLink]
    def create_store(request, opts = {})
      data, _status_code, _headers = create_store_with_http_info(request, opts)
      return data
    end

    # Create a new store
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinksGetStoresLink, Fixnum, Hash)>] LinksGetStoresLink data, response status code and response headers
    def create_store_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.create_store ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.create_store" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinksGetStoresLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#create_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the channel catalog
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_channel_catalog(opts = {})
      delete_channel_catalog_with_http_info(opts)
      return nil
    end

    # Delete the channel catalog
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_channel_catalog_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_channel_catalog ..."
      end
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific channel catalog product value override
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param channel_column_id The channel column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_channel_catalog_product_value_override(channel_catalog_id, product_id, channel_column_id, opts = {})
      delete_channel_catalog_product_value_override_with_http_info(channel_catalog_id, product_id, channel_column_id, opts)
      return nil
    end

    # Delete a specific channel catalog product value override
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param channel_column_id The channel column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_channel_catalog_product_value_override_with_http_info(channel_catalog_id, product_id, channel_column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_channel_catalog_product_value_override ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.delete_channel_catalog_product_value_override" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.delete_channel_catalog_product_value_override" if product_id.nil?
      # verify the required parameter 'channel_column_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_column_id' when calling BeezUPApi.delete_channel_catalog_product_value_override" if channel_column_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s).sub('{' + 'channelColumnId' + '}', channel_column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_channel_catalog_product_value_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete your next contract
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_next_contract(opts = {})
      delete_next_contract_with_http_info(opts)
      return nil
    end

    # Delete your next contract
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_next_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_next_contract ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/contracts/next".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_next_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_report_filter(store_id, report_filter_id, opts = {})
      delete_report_filter_with_http_info(store_id, report_filter_id, opts)
      return nil
    end

    # Delete the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_report_filter_with_http_info(store_id, report_filter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_report_filter ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.delete_report_filter" if store_id.nil?
      # verify the required parameter 'report_filter_id' is set
      fail ArgumentError, "Missing the required parameter 'report_filter_id' when calling BeezUPApi.delete_report_filter" if report_filter_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'reportFilterId' + '}', report_filter_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_report_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rule(store_id, rule_id, opts = {})
      delete_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Delete Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.delete_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.delete_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a share to another user
    # 
    # @param store_id Your store identifier
    # @param user_id The friend user id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_share(store_id, user_id, opts = {})
      delete_share_with_http_info(store_id, user_id, opts)
      return nil
    end

    # Delete a share to another user
    # 
    # @param store_id Your store identifier
    # @param user_id The friend user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_share_with_http_info(store_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_share ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.delete_share" if store_id.nil?
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling BeezUPApi.delete_share" if user_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/shares/{userId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_store(store_id, opts = {})
      delete_store_with_http_info(store_id, opts)
      return nil
    end

    # Delete a store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_store_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.delete_store ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.delete_store" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#delete_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_channel_catalog(channel_catalog_id, opts = {})
      disable_channel_catalog_with_http_info(channel_catalog_id, opts)
      return nil
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_channel_catalog_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.disable_channel_catalog ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.disable_channel_catalog" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/disable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#disable_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_channel_catalog_product(channel_catalog_id, product_id, opts = {})
      disable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts)
      return nil
    end

    # Disable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.disable_channel_catalog_product ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.disable_channel_catalog_product" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.disable_channel_catalog_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#disable_channel_catalog_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_rule(store_id, rule_id, opts = {})
      disable_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Disable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.disable_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.disable_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.disable_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/disable".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#disable_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_channel_catalog(channel_catalog_id, opts = {})
      enable_channel_catalog_with_http_info(channel_catalog_id, opts)
      return nil
    end

    # Enable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_channel_catalog_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.enable_channel_catalog ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.enable_channel_catalog" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/enable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#enable_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_rule(store_id, rule_id, opts = {})
      enable_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Enable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.enable_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.enable_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.enable_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/enable".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#enable_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a new Order report exportation to be generated
    # A new file will be generated containing a summary of all the Orders matching the requested filter settings.
    # @param format The type of the file to export
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_orders(format, request, opts = {})
      export_orders_with_http_info(format, request, opts)
      return nil
    end

    # Request a new Order report exportation to be generated
    # A new file will be generated containing a summary of all the Orders matching the requested filter settings.
    # @param format The type of the file to export
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_orders_with_http_info(format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.export_orders ..."
      end
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling BeezUPApi.export_orders" if format.nil?
      # verify enum value
      unless ['csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.export_orders" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/exportations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#export_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export the report by category
    # Export the report by category
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BeezUPCommonLink3]
    def export_store_report_by_category(store_id, format, request, opts = {})
      data, _status_code, _headers = export_store_report_by_category_with_http_info(store_id, format, request, opts)
      return data
    end

    # Export the report by category
    # Export the report by category
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeezUPCommonLink3, Fixnum, Hash)>] BeezUPCommonLink3 data, response status code and response headers
    def export_store_report_by_category_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.export_store_report_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.export_store_report_by_category" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling BeezUPApi.export_store_report_by_category" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.export_store_report_by_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bycategory/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeezUPCommonLink3')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#export_store_report_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export the report by channel
    # Export the report by channel
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BeezUPCommonLink3]
    def export_store_report_by_channel(store_id, format, request, opts = {})
      data, _status_code, _headers = export_store_report_by_channel_with_http_info(store_id, format, request, opts)
      return data
    end

    # Export the report by channel
    # Export the report by channel
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeezUPCommonLink3, Fixnum, Hash)>] BeezUPCommonLink3 data, response status code and response headers
    def export_store_report_by_channel_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.export_store_report_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.export_store_report_by_channel" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling BeezUPApi.export_store_report_by_channel" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.export_store_report_by_channel" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bychannel/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeezUPCommonLink3')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#export_store_report_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export the report by product
    # Export the report by product
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BeezUPCommonLink3]
    def export_store_report_by_product(store_id, format, request, opts = {})
      data, _status_code, _headers = export_store_report_by_product_with_http_info(store_id, format, request, opts)
      return data
    end

    # Export the report by product
    # Export the report by product
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeezUPCommonLink3, Fixnum, Hash)>] BeezUPCommonLink3 data, response status code and response headers
    def export_store_report_by_product_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.export_store_report_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.export_store_report_by_product" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling BeezUPApi.export_store_report_by_product" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.export_store_report_by_product" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byproduct/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeezUPCommonLink3')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#export_store_report_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of configured automatic Order status transitions
    # 
    # @param [Hash] opts the optional parameters
    # @return [AutomaticTransitionInfos]
    def get_automatic_transitions(opts = {})
      data, _status_code, _headers = get_automatic_transitions_with_http_info(opts)
      return data
    end

    # Get list of configured automatic Order status transitions
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomaticTransitionInfos, Fixnum, Hash)>] AutomaticTransitionInfos data, response status code and response headers
    def get_automatic_transitions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_automatic_transitions ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/automaticTransitions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutomaticTransitionInfos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_automatic_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get billing periods conditions
    # 
    # @param [Hash] opts the optional parameters
    # @return [BillingPeriods]
    def get_billing_periods(opts = {})
      data, _status_code, _headers = get_billing_periods_with_http_info(opts)
      return data
    end

    # Get billing periods conditions
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingPeriods, Fixnum, Hash)>] BillingPeriods data, response status code and response headers
    def get_billing_periods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_billing_periods ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/billingPeriods".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BillingPeriods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_billing_periods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the channel catalog information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalog]
    def get_channel_catalog(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get the channel catalog information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalog, Fixnum, Hash)>] ChannelCatalog data, response status code and response headers
    def get_channel_catalog_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.get_channel_catalog" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalog')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog categories
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogCategoryMappings]
    def get_channel_catalog_categories(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_categories_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get channel catalog categories
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogCategoryMappings, Fixnum, Hash)>] ChannelCatalogCategoryMappings data, response status code and response headers
    def get_channel_catalog_categories_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog_categories ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.get_channel_catalog_categories" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogCategoryMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog exclusion filter operators
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<ExclusionFilterOperator>]
    def get_channel_catalog_exclusion_filter_operators(opts = {})
      data, _status_code, _headers = get_channel_catalog_exclusion_filter_operators_with_http_info(opts)
      return data
    end

    # Get channel catalog exclusion filter operators
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExclusionFilterOperator>, Fixnum, Hash)>] Array<ExclusionFilterOperator> data, response status code and response headers
    def get_channel_catalog_exclusion_filter_operators_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog_exclusion_filter_operators ..."
      end
      # resource path
      local_var_path = "/v2/user/channelCatalogs/exclusionFilterOperators".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExclusionFilterOperator>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog_exclusion_filter_operators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the marketplace properties for a channel catalog
    # 
    # @param channel_catalog_id 
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogMarketplaceProperties]
    def get_channel_catalog_marketplace_properties(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_marketplace_properties_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get the marketplace properties for a channel catalog
    # 
    # @param channel_catalog_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogMarketplaceProperties, Fixnum, Hash)>] ChannelCatalogMarketplaceProperties data, response status code and response headers
    def get_channel_catalog_marketplace_properties_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog_marketplace_properties ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.get_channel_catalog_marketplace_properties" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/properties".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogMarketplaceProperties')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog_marketplace_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the marketplace settings for a channel catalog
    # 
    # @param channel_catalog_id Channel Catalog Id to query (required)
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogMarketplaceSettings]
    def get_channel_catalog_marketplace_settings(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_marketplace_settings_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get the marketplace settings for a channel catalog
    # 
    # @param channel_catalog_id Channel Catalog Id to query (required)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogMarketplaceSettings, Fixnum, Hash)>] ChannelCatalogMarketplaceSettings data, response status code and response headers
    def get_channel_catalog_marketplace_settings_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog_marketplace_settings ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.get_channel_catalog_marketplace_settings" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogMarketplaceSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog_marketplace_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog product information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogProductInfo]
    def get_channel_catalog_product_info(channel_catalog_id, product_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_product_info_with_http_info(channel_catalog_id, product_id, opts)
      return data
    end

    # Get channel catalog product information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogProductInfo, Fixnum, Hash)>] ChannelCatalogProductInfo data, response status code and response headers
    def get_channel_catalog_product_info_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog_product_info ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.get_channel_catalog_product_info" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.get_channel_catalog_product_info" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogProductInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog_product_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog product information list
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetChannelCatalogProductInfoListRequest] :request The channel catalog product list filter
    # @return [ChannelCatalogProductInfoList]
    def get_channel_catalog_product_info_list(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_product_info_list_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get channel catalog product information list
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetChannelCatalogProductInfoListRequest] :request The channel catalog product list filter
    # @return [Array<(ChannelCatalogProductInfoList, Fixnum, Hash)>] ChannelCatalogProductInfoList data, response status code and response headers
    def get_channel_catalog_product_info_list_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalog_product_info_list ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.get_channel_catalog_product_info_list" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogProductInfoList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalog_product_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all your current channel catalogs
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id The store identifier
    # @return [ChannelCatalogList]
    def get_channel_catalogs(opts = {})
      data, _status_code, _headers = get_channel_catalogs_with_http_info(opts)
      return data
    end

    # List all your current channel catalogs
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id The store identifier
    # @return [Array<(ChannelCatalogList, Fixnum, Hash)>] ChannelCatalogList data, response status code and response headers
    def get_channel_catalogs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_catalogs ..."
      end
      # resource path
      local_var_path = "/v2/user/channelCatalogs/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'storeId'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_catalogs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel categories
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [ChannelRootCategory]
    def get_channel_categories(channel_id, accept_encoding, opts = {})
      data, _status_code, _headers = get_channel_categories_with_http_info(channel_id, accept_encoding, opts)
      return data
    end

    # Get channel categories
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelRootCategory, Fixnum, Hash)>] ChannelRootCategory data, response status code and response headers
    def get_channel_categories_with_http_info(channel_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_categories ..."
      end
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling BeezUPApi.get_channel_categories" if channel_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling BeezUPApi.get_channel_categories" if accept_encoding.nil?
      # resource path
      local_var_path = "/v2/user/channels/{channelId}/categories".sub('{format}','json').sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelRootCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel columns
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BeezUPCommonChannelColumnId>] :request Allow you to filter the channel column identifier list your want to get
    # @return [Array<ChannelColumn>]
    def get_channel_columns(channel_id, accept_encoding, opts = {})
      data, _status_code, _headers = get_channel_columns_with_http_info(channel_id, accept_encoding, opts)
      return data
    end

    # Get channel columns
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BeezUPCommonChannelColumnId>] :request Allow you to filter the channel column identifier list your want to get
    # @return [Array<(Array<ChannelColumn>, Fixnum, Hash)>] Array<ChannelColumn> data, response status code and response headers
    def get_channel_columns_with_http_info(channel_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_columns ..."
      end
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling BeezUPApi.get_channel_columns" if channel_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling BeezUPApi.get_channel_columns" if accept_encoding.nil?
      # resource path
      local_var_path = "/v2/user/channels/{channelId}/columns".sub('{format}','json').sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelColumn>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel information
    # 
    # @param channel_id The channel identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelInfo]
    def get_channel_info(channel_id, opts = {})
      data, _status_code, _headers = get_channel_info_with_http_info(channel_id, opts)
      return data
    end

    # Get channel information
    # 
    # @param channel_id The channel identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelInfo, Fixnum, Hash)>] ChannelInfo data, response status code and response headers
    def get_channel_info_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_channel_info ..."
      end
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling BeezUPApi.get_channel_info" if channel_id.nil?
      # resource path
      local_var_path = "/v2/user/channels/{channelId}".sub('{format}','json').sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_channel_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Contracts]
    def get_contracts(opts = {})
      data, _status_code, _headers = get_contracts_with_http_info(opts)
      return data
    end

    # Get contract list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contracts, Fixnum, Hash)>] Contracts data, response status code and response headers
    def get_contracts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_contracts ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/contracts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contracts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get credit card information
    # 
    # @param [Hash] opts the optional parameters
    # @return [CreditCardInfoResponse]
    def get_credit_card_info(opts = {})
      data, _status_code, _headers = get_credit_card_info_with_http_info(opts)
      return data
    end

    # Get credit card information
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreditCardInfoResponse, Fixnum, Hash)>] CreditCardInfoResponse data, response status code and response headers
    def get_credit_card_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_credit_card_info ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/account/creditCardInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreditCardInfoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_credit_card_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all available channel for this store
    # 
    # @param store_id The store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelHeader>]
    def get_current_channels(store_id, opts = {})
      data, _status_code, _headers = get_current_channels_with_http_info(store_id, opts)
      return data
    end

    # List all available channel for this store
    # 
    # @param store_id The store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelHeader>, Fixnum, Hash)>] Array<ChannelHeader> data, response status code and response headers
    def get_current_channels_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_current_channels ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_current_channels" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/channels/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'storeId'] = store_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelHeader>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_current_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get friend information
    # 
    # @param user_id Your friend user id
    # @param [Hash] opts the optional parameters
    # @return [UserFriendInfo]
    def get_friend_info(user_id, opts = {})
      data, _status_code, _headers = get_friend_info_with_http_info(user_id, opts)
      return data
    end

    # Get friend information
    # 
    # @param user_id Your friend user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserFriendInfo, Fixnum, Hash)>] UserFriendInfo data, response status code and response headers
    def get_friend_info_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_friend_info ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling BeezUPApi.get_friend_info" if user_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/friends/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserFriendInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_friend_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all your invoices
    # 
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_invoices(opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(opts)
      return data
    end

    # Get all your invoices
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_invoices ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/invoices".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get  you marketplace channel catalog list
    # 
    # @param [Hash] opts the optional parameters
    # @return [MarketplaceChannelCatalogList]
    def get_marketplace_account_stores(opts = {})
      data, _status_code, _headers = get_marketplace_account_stores_with_http_info(opts)
      return data
    end

    # Get  you marketplace channel catalog list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MarketplaceChannelCatalogList, Fixnum, Hash)>] MarketplaceChannelCatalogList data, response status code and response headers
    def get_marketplace_account_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_marketplace_account_stores ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/channelcatalogs/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MarketplaceChannelCatalogList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_marketplace_account_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current synchronization status between your marketplaces and BeezUP accounts
    # 
    # @param [Hash] opts the optional parameters
    # @return [AccountSynchronizations]
    def get_marketplace_accounts_synchronization(opts = {})
      data, _status_code, _headers = get_marketplace_accounts_synchronization_with_http_info(opts)
      return data
    end

    # Get current synchronization status between your marketplaces and BeezUP accounts
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountSynchronizations, Fixnum, Hash)>] AccountSynchronizations data, response status code and response headers
    def get_marketplace_accounts_synchronization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_marketplace_accounts_synchronization ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/status".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountSynchronizations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_marketplace_accounts_synchronization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get offer pricing
    # Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Offer]
    def get_offer(request, opts = {})
      data, _status_code, _headers = get_offer_with_http_info(request, opts)
      return data
    end

    # Get offer pricing
    # Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Offer, Fixnum, Hash)>] Offer data, response status code and response headers
    def get_offer_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_offer ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.get_offer" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/offers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Offer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_offer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Order]
    def get_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.get_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.get_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling BeezUPApi.get_order" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paginated list of Order report exportations
    # 
    # @param page_number The page number you want to get
    # @param page_size The count of Order report exportations you want to get
    # @param [Hash] opts the optional parameters
    # @return [OrderExportations]
    def get_order_exportations(page_number, page_size, opts = {})
      data, _status_code, _headers = get_order_exportations_with_http_info(page_number, page_size, opts)
      return data
    end

    # Get a paginated list of Order report exportations
    # 
    # @param page_number The page number you want to get
    # @param page_size The count of Order report exportations you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderExportations, Fixnum, Hash)>] OrderExportations data, response status code and response headers
    def get_order_exportations_with_http_info(page_number, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_order_exportations ..."
      end
      # verify the required parameter 'page_number' is set
      fail ArgumentError, "Missing the required parameter 'page_number' when calling BeezUPApi.get_order_exportations" if page_number.nil?
      if page_number < 1
        fail ArgumentError, 'invalid value for "page_number" when calling BeezUPApi.get_order_exportations, must be greater than or equal to 1.'
      end

      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling BeezUPApi.get_order_exportations" if page_size.nil?
      if page_size > 100
        fail ArgumentError, 'invalid value for "page_size" when calling BeezUPApi.get_order_exportations, must be smaller than or equal to 100.'
      end

      if page_size < 25
        fail ArgumentError, 'invalid value for "page_size" when calling BeezUPApi.get_order_exportations, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = "/v2/user/marketplaces/orders/exportations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = page_number
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderExportations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_order_exportations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Order's harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [OrderHistory]
    def get_order_history(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get an Order&#39;s harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderHistory, Fixnum, Hash)>] OrderHistory data, response status code and response headers
    def get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_order_history ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.get_order_history" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.get_order_history" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling BeezUPApi.get_order_history" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_order_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paginated list of all Orders with all Order and Order Item(s) properties
    # The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
    # @param accept_encoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [OrderListFull]
    def get_order_list_full(accept_encoding, opts = {})
      data, _status_code, _headers = get_order_list_full_with_http_info(accept_encoding, opts)
      return data
    end

    # Get a paginated list of all Orders with all Order and Order Item(s) properties
    # The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
    # @param accept_encoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [Array<(OrderListFull, Fixnum, Hash)>] OrderListFull data, response status code and response headers
    def get_order_list_full_with_http_info(accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_order_list_full ..."
      end
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling BeezUPApi.get_order_list_full" if accept_encoding.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/list/full".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderListFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_order_list_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paginated list of all Orders without details
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [OrderListLight]
    def get_order_list_light(opts = {})
      data, _status_code, _headers = get_order_list_light_with_http_info(opts)
      return data
    end

    # Get a paginated list of all Orders without details
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [Array<(OrderListLight, Fixnum, Hash)>] OrderListLight data, response status code and response headers
    def get_order_list_light_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_order_list_light ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/list/light".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderListLight')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_order_list_light\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch the publication history for an account, sorted by descending start date
    # 
    # @param marketplace_technical_code Marketplace Technical Code to query (required)
    # @param account_id Account Id to query (required)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_catalog_id Channel Catalog Id by which to filter (optional)
    # @option opts [Integer] :count Amount of entries to fetch (optional, default set to 10) (default to 10)
    # @option opts [Array<String>] :publication_types Publication types by which to filter (optional)
    # @return [AccountPublications]
    def get_publications(marketplace_technical_code, account_id, opts = {})
      data, _status_code, _headers = get_publications_with_http_info(marketplace_technical_code, account_id, opts)
      return data
    end

    # Fetch the publication history for an account, sorted by descending start date
    # 
    # @param marketplace_technical_code Marketplace Technical Code to query (required)
    # @param account_id Account Id to query (required)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_catalog_id Channel Catalog Id by which to filter (optional)
    # @option opts [Integer] :count Amount of entries to fetch (optional, default set to 10)
    # @option opts [Array<String>] :publication_types Publication types by which to filter (optional)
    # @return [Array<(AccountPublications, Fixnum, Hash)>] AccountPublications data, response status code and response headers
    def get_publications_with_http_info(marketplace_technical_code, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_publications ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.get_publications" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.get_publications" if account_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_publications, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 10
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_publications, must be greater than or equal to 10.'
      end

      if opts[:'publication_types'] && !opts[:'publication_types'].all?{|item| ['PublishProducts', 'PublishOffers', 'Unpublish'].include?(item)}
        fail ArgumentError, 'invalid value for "publication_types", must include one of PublishProducts, PublishOffers, Unpublish'
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'channelCatalogId'] = opts[:'channel_catalog_id'] if !opts[:'channel_catalog_id'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'publicationTypes'] = @api_client.build_collection_param(opts[:'publication_types'], :csv) if !opts[:'publication_types'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountPublications')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_publications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report filter description
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [ReportFilter]
    def get_report_filter(store_id, report_filter_id, opts = {})
      data, _status_code, _headers = get_report_filter_with_http_info(store_id, report_filter_id, opts)
      return data
    end

    # Get the report filter description
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportFilter, Fixnum, Hash)>] ReportFilter data, response status code and response headers
    def get_report_filter_with_http_info(store_id, report_filter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_report_filter ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_report_filter" if store_id.nil?
      # verify the required parameter 'report_filter_id' is set
      fail ArgumentError, "Missing the required parameter 'report_filter_id' when calling BeezUPApi.get_report_filter" if report_filter_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'reportFilterId' + '}', report_filter_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportFilter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_report_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get report filter list for the given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [ReportFilters]
    def get_report_filters(store_id, opts = {})
      data, _status_code, _headers = get_report_filters_with_http_info(store_id, opts)
      return data
    end

    # Get report filter list for the given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportFilters, Fixnum, Hash)>] ReportFilters data, response status code and response headers
    def get_report_filters_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_report_filters ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_report_filters" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportFilters')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_report_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store's rights
    # 
    # @param store_id Your store identifier
    # @param functionality_code_list The functionality code list you want to check
    # @param [Hash] opts the optional parameters
    # @return [Array<FunctionalityRightInfo>]
    def get_rights(store_id, functionality_code_list, opts = {})
      data, _status_code, _headers = get_rights_with_http_info(store_id, functionality_code_list, opts)
      return data
    end

    # Get store&#39;s rights
    # 
    # @param store_id Your store identifier
    # @param functionality_code_list The functionality code list you want to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FunctionalityRightInfo>, Fixnum, Hash)>] Array<FunctionalityRightInfo> data, response status code and response headers
    def get_rights_with_http_info(store_id, functionality_code_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_rights ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_rights" if store_id.nil?
      # verify the required parameter 'functionality_code_list' is set
      fail ArgumentError, "Missing the required parameter 'functionality_code_list' when calling BeezUPApi.get_rights" if functionality_code_list.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/rights".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(functionality_code_list)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FunctionalityRightInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_rights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_rule(store_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(store_id, rule_id, opts)
      return data
    end

    # Gets the rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.get_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of rules for a given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Rulelist]
    def get_rules(store_id, opts = {})
      data, _status_code, _headers = get_rules_with_http_info(store_id, opts)
      return data
    end

    # Gets the list of rules for a given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rulelist, Fixnum, Hash)>] Rulelist data, response status code and response headers
    def get_rules_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_rules ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_rules" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rulelist')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the rules execution history
    # 
    # @param store_id Your store identifier
    # @param page_number The page to retrieve
    # @param page_size The count of rule history to retrieve
    # @param [Hash] opts the optional parameters
    # @return [RuleExecutionReportings]
    def get_rules_executions(store_id, page_number, page_size, opts = {})
      data, _status_code, _headers = get_rules_executions_with_http_info(store_id, page_number, page_size, opts)
      return data
    end

    # Get the rules execution history
    # 
    # @param store_id Your store identifier
    # @param page_number The page to retrieve
    # @param page_size The count of rule history to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleExecutionReportings, Fixnum, Hash)>] RuleExecutionReportings data, response status code and response headers
    def get_rules_executions_with_http_info(store_id, page_number, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_rules_executions ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_rules_executions" if store_id.nil?
      # verify the required parameter 'page_number' is set
      fail ArgumentError, "Missing the required parameter 'page_number' when calling BeezUPApi.get_rules_executions" if page_number.nil?
      if page_number < 1
        fail ArgumentError, 'invalid value for "page_number" when calling BeezUPApi.get_rules_executions, must be greater than or equal to 1.'
      end

      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling BeezUPApi.get_rules_executions" if page_size.nil?
      if page_size > 100
        fail ArgumentError, 'invalid value for "page_size" when calling BeezUPApi.get_rules_executions, must be smaller than or equal to 100.'
      end

      if page_size < 10
        fail ArgumentError, 'invalid value for "page_size" when calling BeezUPApi.get_rules_executions, must be greater than or equal to 10.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/executions".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = page_number
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleExecutionReportings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_rules_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get shares related to this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreShares]
    def get_shares(store_id, opts = {})
      data, _status_code, _headers = get_shares_with_http_info(store_id, opts)
      return data
    end

    # Get shares related to this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreShares, Fixnum, Hash)>] StoreShares data, response status code and response headers
    def get_shares_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_shares ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_shares" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/shares".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreShares')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all standard offers
    # 
    # @param [Hash] opts the optional parameters
    # @return [StandardOffers]
    def get_standard_offers(opts = {})
      data, _status_code, _headers = get_standard_offers_with_http_info(opts)
      return data
    end

    # Get all standard offers
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardOffers, Fixnum, Hash)>] StandardOffers data, response status code and response headers
    def get_standard_offers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_standard_offers ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/offers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardOffers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_standard_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store's information
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreHeader]
    def get_store(store_id, opts = {})
      data, _status_code, _headers = get_store_with_http_info(store_id, opts)
      return data
    end

    # Get store&#39;s information
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreHeader, Fixnum, Hash)>] StoreHeader data, response status code and response headers
    def get_store_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreHeader')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store's alerts
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreAlerts]
    def get_store_alerts(store_id, opts = {})
      data, _status_code, _headers = get_store_alerts_with_http_info(store_id, opts)
      return data
    end

    # Get store&#39;s alerts
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreAlerts, Fixnum, Hash)>] StoreAlerts data, response status code and response headers
    def get_store_alerts_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_alerts ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_alerts" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/alerts".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreAlerts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by category
    # Get the report by category
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByCategoryResponse]
    def get_store_report_by_category(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_category_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by category
    # Get the report by category
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByCategoryResponse, Fixnum, Hash)>] ReportByCategoryResponse data, response status code and response headers
    def get_store_report_by_category_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_report_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_report_by_category" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.get_store_report_by_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bycategory".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByCategoryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_report_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by channel
    # Get the report by channel
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByChannelResponse]
    def get_store_report_by_channel(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_channel_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by channel
    # Get the report by channel
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByChannelResponse, Fixnum, Hash)>] ReportByChannelResponse data, response status code and response headers
    def get_store_report_by_channel_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_report_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_report_by_channel" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.get_store_report_by_channel" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bychannel".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByChannelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_report_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByDayResponse]
    def get_store_report_by_day(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_day_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByDayResponse, Fixnum, Hash)>] ReportByDayResponse data, response status code and response headers
    def get_store_report_by_day_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_report_by_day ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_report_by_day" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.get_store_report_by_day" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byday".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByDayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_report_by_day\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BeezUPCommonLink3]
    def get_store_report_by_day_export(store_id, format, request, opts = {})
      data, _status_code, _headers = get_store_report_by_day_export_with_http_info(store_id, format, request, opts)
      return data
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeezUPCommonLink3, Fixnum, Hash)>] BeezUPCommonLink3 data, response status code and response headers
    def get_store_report_by_day_export_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_report_by_day_export ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_report_by_day_export" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling BeezUPApi.get_store_report_by_day_export" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.get_store_report_by_day_export" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byday/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeezUPCommonLink3')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_report_by_day_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by product
    # Get the report by product
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByProductResponse]
    def get_store_report_by_product(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_product_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by product
    # Get the report by product
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByProductResponse, Fixnum, Hash)>] ReportByProductResponse data, response status code and response headers
    def get_store_report_by_product_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_report_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_report_by_product" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.get_store_report_by_product" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byproduct".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByProductResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_report_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest clicks tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The click&#39;s count you want to get (default to 100)
    # @return [TrackedClicks]
    def get_store_tracked_clicks(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_clicks_with_http_info(store_id, opts)
      return data
    end

    # Get the latest clicks tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The click&#39;s count you want to get
    # @return [Array<(TrackedClicks, Fixnum, Hash)>] TrackedClicks data, response status code and response headers
    def get_store_tracked_clicks_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_tracked_clicks ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_tracked_clicks" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_store_tracked_clicks, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_store_tracked_clicks, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/clicks".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedClicks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_tracked_clicks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest external orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The external order&#39;s count you want to get (default to 100)
    # @return [TrackedExternalOrders]
    def get_store_tracked_external_orders(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_external_orders_with_http_info(store_id, opts)
      return data
    end

    # Get the latest external orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The external order&#39;s count you want to get
    # @return [Array<(TrackedExternalOrders, Fixnum, Hash)>] TrackedExternalOrders data, response status code and response headers
    def get_store_tracked_external_orders_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_tracked_external_orders ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_tracked_external_orders" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_store_tracked_external_orders, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_store_tracked_external_orders, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/externalorders".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedExternalOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_tracked_external_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The order&#39;s count you want to get (default to 100)
    # @return [TrackedOrders]
    def get_store_tracked_orders(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_orders_with_http_info(store_id, opts)
      return data
    end

    # Get the latest orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The order&#39;s count you want to get
    # @return [Array<(TrackedOrders, Fixnum, Hash)>] TrackedOrders data, response status code and response headers
    def get_store_tracked_orders_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_tracked_orders ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_tracked_orders" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_store_tracked_orders, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling BeezUPApi.get_store_tracked_orders, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/orders".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_tracked_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store tracking synchronization status
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreTrackingStatus]
    def get_store_tracking_status(store_id, opts = {})
      data, _status_code, _headers = get_store_tracking_status_with_http_info(store_id, opts)
      return data
    end

    # Get store tracking synchronization status
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreTrackingStatus, Fixnum, Hash)>] StoreTrackingStatus data, response status code and response headers
    def get_store_tracking_status_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_store_tracking_status ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.get_store_tracking_status" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/status".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreTrackingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_store_tracking_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Stores]
    def get_stores(opts = {})
      data, _status_code, _headers = get_stores_with_http_info(opts)
      return data
    end

    # Get store list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Stores, Fixnum, Hash)>] Stores data, response status code and response headers
    def get_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_stores ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/stores".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Stores')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Display the synchronization status of the clicks and orders
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
    # @param [Hash] opts the optional parameters
    # @return [TrackingStatus]
    def get_tracking_status(opts = {})
      data, _status_code, _headers = get_tracking_status_with_http_info(opts)
      return data
    end

    # Display the synchronization status of the clicks and orders
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrackingStatus, Fixnum, Hash)>] TrackingStatus data, response status code and response headers
    def get_tracking_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_tracking_status ..."
      end
      # resource path
      local_var_path = "/v2/user/analytics/tracking/status".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_tracking_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user account information
    # 
    # @param [Hash] opts the optional parameters
    # @return [AccountInfo]
    def get_user_account_info(opts = {})
      data, _status_code, _headers = get_user_account_info_with_http_info(opts)
      return data
    end

    # Get user account information
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountInfo, Fixnum, Hash)>] AccountInfo data, response status code and response headers
    def get_user_account_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_user_account_info ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/account".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_user_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of values related to this group name
    # 
    # @param list_group_name The list group name your want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLOVLink2>]
    def get_user_list_group(list_group_name, opts = {})
      data, _status_code, _headers = get_user_list_group_with_http_info(list_group_name, opts)
      return data
    end

    # Get list of values related to this group name
    # 
    # @param list_group_name The list group name your want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLOVLink2>, Fixnum, Hash)>] Array<BeezUPCommonLOVLink2> data, response status code and response headers
    def get_user_list_group_with_http_info(list_group_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_user_list_group ..."
      end
      # verify the required parameter 'list_group_name' is set
      fail ArgumentError, "Missing the required parameter 'list_group_name' when calling BeezUPApi.get_user_list_group" if list_group_name.nil?
      # resource path
      local_var_path = "/v2/user/lov/groups/{listGroupName}".sub('{format}','json').sub('{' + 'listGroupName' + '}', list_group_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLOVLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_user_list_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of group of list name
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLOVLink2>]
    def get_user_list_group_names(opts = {})
      data, _status_code, _headers = get_user_list_group_names_with_http_info(opts)
      return data
    end

    # Get list of group of list name
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLOVLink2>, Fixnum, Hash)>] Array<BeezUPCommonLOVLink2> data, response status code and response headers
    def get_user_list_group_names_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_user_list_group_names ..."
      end
      # resource path
      local_var_path = "/v2/user/lov/groups".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLOVLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_user_list_group_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all list names
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLOVLink2>]
    def get_user_list_names(opts = {})
      data, _status_code, _headers = get_user_list_names_with_http_info(opts)
      return data
    end

    # Get all list names
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLOVLink2>, Fixnum, Hash)>] Array<BeezUPCommonLOVLink2> data, response status code and response headers
    def get_user_list_names_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_user_list_names ..."
      end
      # resource path
      local_var_path = "/v2/user/lov/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLOVLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_user_list_names\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of values related to this list name
    # 
    # @param list_name The list of value name your want to get
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :accept_language Indicates that the client accepts the following languages.
    # @return [Array<BeezUPCommonListOfValueItem>]
    def get_user_list_of_values(list_name, opts = {})
      data, _status_code, _headers = get_user_list_of_values_with_http_info(list_name, opts)
      return data
    end

    # Get the list of values related to this list name
    # 
    # @param list_name The list of value name your want to get
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :accept_language Indicates that the client accepts the following languages.
    # @return [Array<(Array<BeezUPCommonListOfValueItem>, Fixnum, Hash)>] Array<BeezUPCommonListOfValueItem> data, response status code and response headers
    def get_user_list_of_values_with_http_info(list_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.get_user_list_of_values ..."
      end
      # verify the required parameter 'list_name' is set
      fail ArgumentError, "Missing the required parameter 'list_name' when calling BeezUPApi.get_user_list_of_values" if list_name.nil?
      # resource path
      local_var_path = "/v2/user/lov/{listName}".sub('{format}','json').sub('{' + 'listName' + '}', list_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Language'] = @api_client.build_collection_param(opts[:'accept_language'], :csv) if !opts[:'accept_language'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonListOfValueItem>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#get_user_list_of_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request to all your marketplaces
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_all(opts = {})
      harvest_all_with_http_info(opts)
      return nil
    end

    # Send harvest request to all your marketplaces
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.harvest_all ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/harvest".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#harvest_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.harvest_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.harvest_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.harvest_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling BeezUPApi.harvest_order" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#harvest_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate the auto importation of the last successful manual catalog importation.
    # Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_activate_auto_import(store_id, opts = {})
      importation_activate_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Activate the auto importation of the last successful manual catalog importation.
    # Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_activate_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_activate_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_activate_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_activate_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_cancel(store_id, execution_id, opts = {})
      importation_cancel_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Cancel importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_cancel_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_cancel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_cancel" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_cancel" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit Importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_commit(store_id, execution_id, opts = {})
      importation_commit_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Commit Importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_commit_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_commit ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_commit" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_commit" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/commit".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_commit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit columns
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_commit_columns(store_id, execution_id, opts = {})
      importation_commit_columns_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Commit columns
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_commit_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_commit_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_commit_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_commit_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_commit_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_configure_catalog_column(store_id, execution_id, column_id, request, opts = {})
      importation_configure_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Configure catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_configure_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_configure_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_configure_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_configure_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_configure_catalog_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.importation_configure_catalog_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_configure_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure remaining catalog columns
    # This operation should be used after you have mapped the required BeezUP Columns
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_configure_remaining_catalog_columns(store_id, execution_id, opts = {})
      importation_configure_remaining_catalog_columns_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Configure remaining catalog columns
    # This operation should be used after you have mapped the required BeezUP Columns
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_configure_remaining_catalog_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_configure_remaining_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_configure_remaining_catalog_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_configure_remaining_catalog_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_configure_remaining_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Custom Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_delete_custom_column(store_id, execution_id, column_id, opts = {})
      importation_delete_custom_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Delete Custom Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_delete_custom_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_delete_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_delete_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_delete_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def importation_get_custom_column_expression(store_id, execution_id, column_id, opts = {})
      data, _status_code, _headers = importation_get_custom_column_expression_with_http_info(store_id, execution_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def importation_get_custom_column_expression_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_custom_column_expression" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_get_custom_column_expression" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_get_custom_column_expression" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom columns currently place in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [CustomColumns]
    def importation_get_custom_columns(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_custom_columns_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get custom columns currently place in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumns, Fixnum, Hash)>] CustomColumns data, response status code and response headers
    def importation_get_custom_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_custom_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_get_custom_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detected catalog columns during this importation.
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [DetectedCatalogColumns]
    def importation_get_detected_catalog_columns(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_detected_catalog_columns_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get detected catalog columns during this importation.
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectedCatalogColumns, Fixnum, Hash)>] DetectedCatalogColumns data, response status code and response headers
    def importation_get_detected_catalog_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_detected_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_detected_catalog_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_get_detected_catalog_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetectedCatalogColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_detected_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the importation status
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [ImportationMonitoring]
    def importation_get_importation_monitoring(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_importation_monitoring_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get the importation status
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportationMonitoring, Fixnum, Hash)>] ImportationMonitoring data, response status code and response headers
    def importation_get_importation_monitoring_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_importation_monitoring ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_importation_monitoring" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_get_importation_monitoring" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportationMonitoring')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_importation_monitoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [LastManualImportInputConfiguration]
    def importation_get_manual_update_last_input_config(store_id, opts = {})
      data, _status_code, _headers = importation_get_manual_update_last_input_config_with_http_info(store_id, opts)
      return data
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(LastManualImportInputConfiguration, Fixnum, Hash)>] LastManualImportInputConfiguration data, response status code and response headers
    def importation_get_manual_update_last_input_config_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_manual_update_last_input_config ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_manual_update_last_input_config" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/inputConfiguration".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LastManualImportInputConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_manual_update_last_input_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the product sample related to this importation with all columns (catalog and custom)
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param [Hash] opts the optional parameters
    # @return [ProductSample]
    def importation_get_product_sample(store_id, execution_id, product_sample_index, opts = {})
      data, _status_code, _headers = importation_get_product_sample_with_http_info(store_id, execution_id, product_sample_index, opts)
      return data
    end

    # Get the product sample related to this importation with all columns (catalog and custom)
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductSample, Fixnum, Hash)>] ProductSample data, response status code and response headers
    def importation_get_product_sample_with_http_info(store_id, execution_id, product_sample_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_product_sample ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_product_sample" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_get_product_sample" if execution_id.nil?
      # verify the required parameter 'product_sample_index' is set
      fail ArgumentError, "Missing the required parameter 'product_sample_index' when calling BeezUPApi.importation_get_product_sample" if product_sample_index.nil?
      if product_sample_index > 99
        fail ArgumentError, 'invalid value for "product_sample_index" when calling BeezUPApi.importation_get_product_sample, must be smaller than or equal to 99.'
      end

      if product_sample_index < 0
        fail ArgumentError, 'invalid value for "product_sample_index" when calling BeezUPApi.importation_get_product_sample, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'productSampleIndex' + '}', product_sample_index.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductSample')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_product_sample\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product sample custom column value related to this importation.
    # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def importation_get_product_sample_custom_column_value(store_id, execution_id, product_sample_index, column_id, opts = {})
      data, _status_code, _headers = importation_get_product_sample_custom_column_value_with_http_info(store_id, execution_id, product_sample_index, column_id, opts)
      return data
    end

    # Get product sample custom column value related to this importation.
    # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def importation_get_product_sample_custom_column_value_with_http_info(store_id, execution_id, product_sample_index, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_product_sample_custom_column_value ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_product_sample_custom_column_value" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_get_product_sample_custom_column_value" if execution_id.nil?
      # verify the required parameter 'product_sample_index' is set
      fail ArgumentError, "Missing the required parameter 'product_sample_index' when calling BeezUPApi.importation_get_product_sample_custom_column_value" if product_sample_index.nil?
      if product_sample_index > 99
        fail ArgumentError, 'invalid value for "product_sample_index" when calling BeezUPApi.importation_get_product_sample_custom_column_value, must be smaller than or equal to 99.'
      end

      if product_sample_index < 0
        fail ArgumentError, 'invalid value for "product_sample_index" when calling BeezUPApi.importation_get_product_sample_custom_column_value, must be greater than or equal to 0.'
      end

      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_get_product_sample_custom_column_value" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'productSampleIndex' + '}', product_sample_index.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_product_sample_custom_column_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest catalog importation reporting
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<ImportationReporting>]
    def importation_get_reportings(store_id, opts = {})
      data, _status_code, _headers = importation_get_reportings_with_http_info(store_id, opts)
      return data
    end

    # Get the latest catalog importation reporting
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ImportationReporting>, Fixnum, Hash)>] Array<ImportationReporting> data, response status code and response headers
    def importation_get_reportings_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_get_reportings ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_get_reportings" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ImportationReporting>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_get_reportings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ignore Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_ignore_column(store_id, execution_id, column_id, opts = {})
      importation_ignore_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Ignore Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_ignore_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_ignore_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_ignore_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_ignore_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_ignore_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_ignore_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map catalog column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_map_catalog_column(store_id, execution_id, column_id, request, opts = {})
      importation_map_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Map catalog column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_map_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_map_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_map_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_map_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_map_catalog_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.importation_map_catalog_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_map_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map custom column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_map_custom_column(store_id, execution_id, column_id, request, opts = {})
      importation_map_custom_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Map custom column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_map_custom_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_map_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_map_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_map_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_map_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.importation_map_custom_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_map_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reattend Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_reattend_column(store_id, execution_id, column_id, opts = {})
      importation_reattend_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Reattend Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_reattend_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_reattend_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_reattend_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_reattend_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_reattend_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_reattend_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_save_custom_column(store_id, execution_id, column_id, request, opts = {})
      importation_save_custom_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_save_custom_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_save_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_save_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_save_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.importation_save_custom_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Manual Import
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def importation_start_manual_update(store_id, request, opts = {})
      data, _status_code, _headers = importation_start_manual_update_with_http_info(store_id, request, opts)
      return data
    end

    # Start Manual Import
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def importation_start_manual_update_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_start_manual_update ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_start_manual_update" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.importation_start_manual_update" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_start_manual_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get technical progression
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [ImportationTechnicalProgression]
    def importation_technical_progression(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_technical_progression_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get technical progression
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportationTechnicalProgression, Fixnum, Hash)>] ImportationTechnicalProgression data, response status code and response headers
    def importation_technical_progression_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_technical_progression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_technical_progression" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_technical_progression" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportationTechnicalProgression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_technical_progression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_unmap_catalog_column(store_id, execution_id, column_id, opts = {})
      importation_unmap_catalog_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Unmap catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_unmap_catalog_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_unmap_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_unmap_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_unmap_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_unmap_catalog_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_unmap_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_unmap_custom_column(store_id, execution_id, column_id, opts = {})
      importation_unmap_custom_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Unmap custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_unmap_custom_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.importation_unmap_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.importation_unmap_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling BeezUPApi.importation_unmap_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling BeezUPApi.importation_unmap_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#importation_unmap_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Log out the current user from go2
    # Log out the current user from go2
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def logout(opts = {})
      logout_with_http_info(opts)
      return nil
    end

    # Log out the current user from go2
    # Log out the current user from go2
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.logout ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/security/logout".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def map_channel_catalog_category(channel_catalog_id, request, opts = {})
      map_channel_catalog_category_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Map channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def map_channel_catalog_category_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.map_channel_catalog_category ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.map_channel_catalog_category" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.map_channel_catalog_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/map".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#map_channel_catalog_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure channel catalog column mappings
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def map_channel_catalog_columns(channel_catalog_id, request, opts = {})
      map_channel_catalog_columns_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Configure channel catalog column mappings
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def map_channel_catalog_columns_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.map_channel_catalog_columns ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.map_channel_catalog_columns" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.map_channel_catalog_columns" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/columnMappings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#map_channel_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the rule down
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_down_rule(store_id, rule_id, opts = {})
      move_down_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Move the rule down
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_down_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.move_down_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.move_down_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.move_down_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/movedown".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#move_down_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the rule up
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_up_rule(store_id, rule_id, opts = {})
      move_up_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Move the rule up
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_up_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.move_up_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.move_up_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.move_up_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/moveup".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#move_up_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise(store_id, action_name, request, opts = {})
      optimise_with_http_info(store_id, action_name, request, opts)
      return nil
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_with_http_info(store_id, action_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.optimise ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.optimise" if store_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling BeezUPApi.optimise" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.optimise" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#optimise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products's category
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable products's category for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param catalog_category_id The category identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [nil]
    def optimise_by_category(store_id, catalog_category_id, action_name, opts = {})
      optimise_by_category_with_http_info(store_id, catalog_category_id, action_name, opts)
      return nil
    end

    # Optimise products&#39;s category
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param catalog_category_id The category identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_category_with_http_info(store_id, catalog_category_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.optimise_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.optimise_by_category" if store_id.nil?
      # verify the required parameter 'catalog_category_id' is set
      fail ArgumentError, "Missing the required parameter 'catalog_category_id' when calling BeezUPApi.optimise_by_category" if catalog_category_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling BeezUPApi.optimise_by_category" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'catalogCategoryId' + '}', catalog_category_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#optimise_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products's category
    # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
    # @param store_id Your store identifier
    # @param channel_id The channel identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise_by_channel(store_id, channel_id, action_name, opts = {})
      optimise_by_channel_with_http_info(store_id, channel_id, action_name, opts)
      return nil
    end

    # Optimise products&#39;s category
    # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
    # @param store_id Your store identifier
    # @param channel_id The channel identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_channel_with_http_info(store_id, channel_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.optimise_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.optimise_by_channel" if store_id.nil?
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling BeezUPApi.optimise_by_channel" if channel_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling BeezUPApi.optimise_by_channel" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'channelId' + '}', channel_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#optimise_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param product_id The product identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [nil]
    def optimise_by_product(store_id, product_id, action_name, opts = {})
      optimise_by_product_with_http_info(store_id, product_id, action_name, opts)
      return nil
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param product_id The product identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_product_with_http_info(store_id, product_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.optimise_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.optimise_by_product" if store_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.optimise_by_product" if product_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling BeezUPApi.optimise_by_product" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#optimise_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Override channel catalog product values
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def override_channel_catalog_product_overrides(channel_catalog_id, product_id, request, opts = {})
      override_channel_catalog_product_overrides_with_http_info(channel_catalog_id, product_id, request, opts)
      return nil
    end

    # Override channel catalog product values
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def override_channel_catalog_product_overrides_with_http_info(channel_catalog_id, product_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.override_channel_catalog_product_overrides ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.override_channel_catalog_product_overrides" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.override_channel_catalog_product_overrides" if product_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.override_channel_catalog_product_overrides" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#override_channel_catalog_product_overrides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate your terminated contract.
    # By calling this operation you can re-enable the auto renewal.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactivate_current_contract(opts = {})
      reactivate_current_contract_with_http_info(opts)
      return nil
    end

    # Reactivate your terminated contract.
    # By calling this operation you can re-enable the auto renewal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reactivate_current_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.reactivate_current_contract ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/contracts/current/reenableAutoRenewal".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#reactivate_current_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reenable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reenable_channel_catalog_product(channel_catalog_id, product_id, opts = {})
      reenable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts)
      return nil
    end

    # Reenable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reenable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.reenable_channel_catalog_product ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.reenable_channel_catalog_product" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling BeezUPApi.reenable_channel_catalog_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#reenable_channel_catalog_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend email activation
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resend_email_activation(opts = {})
      resend_email_activation_with_http_info(opts)
      return nil
    end

    # Resend email activation
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resend_email_activation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.resend_email_activation ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/account/resendEmailActivation".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#resend_email_activation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_rule(store_id, rule_id, opts = {})
      run_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Run rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.run_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.run_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.run_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/run".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#run_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run all rules for this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_rules(store_id, opts = {})
      run_rules_with_http_info(store_id, opts)
      return nil
    end

    # Run all rules for this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_rules_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.run_rules ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.run_rules" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/run".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#run_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change company information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_company_info(request, opts = {})
      save_company_info_with_http_info(request, opts)
      return nil
    end

    # Change company information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_company_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.save_company_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.save_company_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/companyInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#save_company_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save user credit card info
    # 
    # @param request Credit card info
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_credit_card_info(request, opts = {})
      save_credit_card_info_with_http_info(request, opts)
      return nil
    end

    # Save user credit card info
    # 
    # @param request Credit card info
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_credit_card_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.save_credit_card_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.save_credit_card_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/creditCardInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#save_credit_card_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save user personal information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_personal_info(request, opts = {})
      save_personal_info_with_http_info(request, opts)
      return nil
    end

    # Save user personal information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_personal_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.save_personal_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.save_personal_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/personalInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#save_personal_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change user picture information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_profile_picture_info(request, opts = {})
      save_profile_picture_info_with_http_info(request, opts)
      return nil
    end

    # Change user picture information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_profile_picture_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.save_profile_picture_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.save_profile_picture_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/profilePictureInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#save_profile_picture_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param report_filter 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_report_filter(store_id, report_filter_id, report_filter, opts = {})
      save_report_filter_with_http_info(store_id, report_filter_id, report_filter, opts)
      return nil
    end

    # Save the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param report_filter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_report_filter_with_http_info(store_id, report_filter_id, report_filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.save_report_filter ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.save_report_filter" if store_id.nil?
      # verify the required parameter 'report_filter_id' is set
      fail ArgumentError, "Missing the required parameter 'report_filter_id' when calling BeezUPApi.save_report_filter" if report_filter_id.nil?
      # verify the required parameter 'report_filter' is set
      fail ArgumentError, "Missing the required parameter 'report_filter' when calling BeezUPApi.save_report_filter" if report_filter.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'reportFilterId' + '}', report_filter_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(report_filter)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#save_report_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save store alert
    # 
    # @param store_id Your store identifier
    # @param alert_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_store_alert(store_id, alert_id, request, opts = {})
      save_store_alert_with_http_info(store_id, alert_id, request, opts)
      return nil
    end

    # Save store alert
    # 
    # @param store_id Your store identifier
    # @param alert_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_store_alert_with_http_info(store_id, alert_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.save_store_alert ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.save_store_alert" if store_id.nil?
      # verify the required parameter 'alert_id' is set
      fail ArgumentError, "Missing the required parameter 'alert_id' when calling BeezUPApi.save_store_alert" if alert_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.save_store_alert" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/alerts/{alertId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#save_store_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save new marketplace settings for a channel catalog
    # Allow you to configure your marketplace settings.  Partial update accepted. 
    # @param channel_catalog_id Channel Catalog Id to query
    # @param model Settings to save
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_channel_catalog_marketplace_settings(channel_catalog_id, model, opts = {})
      set_channel_catalog_marketplace_settings_with_http_info(channel_catalog_id, model, opts)
      return nil
    end

    # Save new marketplace settings for a channel catalog
    # Allow you to configure your marketplace settings.  Partial update accepted. 
    # @param channel_catalog_id Channel Catalog Id to query
    # @param model Settings to save
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_channel_catalog_marketplace_settings_with_http_info(channel_catalog_id, model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.set_channel_catalog_marketplace_settings ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.set_channel_catalog_marketplace_settings" if channel_catalog_id.nil?
      # verify the required parameter 'model' is set
      fail ArgumentError, "Missing the required parameter 'model' when calling BeezUPApi.set_channel_catalog_marketplace_settings" if model.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/channelcatalogs/{channelCatalogId}/settings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#set_channel_catalog_marketplace_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts)
      return nil
    end

    # Set an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.set_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling BeezUPApi.set_merchant_order_info" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling BeezUPApi.set_merchant_order_info" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling BeezUPApi.set_merchant_order_info" if beez_up_order_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.set_merchant_order_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#set_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a batch of operations to set an Order's merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BatchOrderOperationResponse]
    def set_merchant_order_info_list(request, opts = {})
      data, _status_code, _headers = set_merchant_order_info_list_with_http_info(request, opts)
      return data
    end

    # Send a batch of operations to set an Order&#39;s merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchOrderOperationResponse, Fixnum, Hash)>] BatchOrderOperationResponse data, response status code and response headers
    def set_merchant_order_info_list_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.set_merchant_order_info_list ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.set_merchant_order_info_list" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchOrderOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#set_merchant_order_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share a store to another user
    # 
    # @param store_id Your store identifier
    # @param email Your friend&#39;s email
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def share(store_id, email, opts = {})
      share_with_http_info(store_id, email, opts)
      return nil
    end

    # Share a store to another user
    # 
    # @param store_id Your store identifier
    # @param email Your friend&#39;s email
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def share_with_http_info(store_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.share ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.share" if store_id.nil?
      # verify the required parameter 'email' is set
      fail ArgumentError, "Missing the required parameter 'email' when calling BeezUPApi.share" if email.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/shares".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule termination of your current contract at the end of the commitment.
    # By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
    # @param request Indicate the termination reason
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def terminate_current_contract(request, opts = {})
      terminate_current_contract_with_http_info(request, opts)
      return nil
    end

    # Schedule termination of your current contract at the end of the commitment.
    # By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
    # @param request Indicate the termination reason
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def terminate_current_contract_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.terminate_current_contract ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.terminate_current_contract" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/contracts/current/disableAutoRenewal".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#terminate_current_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unmap_channel_catalog_category(channel_catalog_id, request, opts = {})
      unmap_channel_catalog_category_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Unmap channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unmap_channel_catalog_category_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.unmap_channel_catalog_category ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling BeezUPApi.unmap_channel_catalog_category" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.unmap_channel_catalog_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#unmap_channel_catalog_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_rule(store_id, rule_id, request, opts = {})
      update_rule_with_http_info(store_id, rule_id, request, opts)
      return nil
    end

    # Update Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_rule_with_http_info(store_id, rule_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.update_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.update_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling BeezUPApi.update_rule" if rule_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.update_rule" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update some store's information.
    # Update some store's information. FYI, you cannot change the country. 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_store(store_id, request, opts = {})
      update_store_with_http_info(store_id, request, opts)
      return nil
    end

    # Update some store&#39;s information.
    # Update some store&#39;s information. FYI, you cannot change the country. 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_store_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BeezUPApi.update_store ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling BeezUPApi.update_store" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling BeezUPApi.update_store" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BeezUPApi#update_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
