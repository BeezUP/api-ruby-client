=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class V2UserCustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Activate the user account
    # 
    # @param email_activation_id The email activation id received by email.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_user_account(email_activation_id, opts = {})
      activate_user_account_with_http_info(email_activation_id, opts)
      return nil
    end

    # Activate the user account
    # 
    # @param email_activation_id The email activation id received by email.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def activate_user_account_with_http_info(email_activation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.activate_user_account ..."
      end
      # verify the required parameter 'email_activation_id' is set
      fail ArgumentError, "Missing the required parameter 'email_activation_id' when calling V2UserCustomerApi.activate_user_account" if email_activation_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/activate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email_activation_id)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#activate_user_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change user password
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def change_password(request, opts = {})
      change_password_with_http_info(request, opts)
      return nil
    end

    # Change user password
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_password_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.change_password ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.change_password" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/changePassword".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#change_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new contract
    # Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BeezUPCommonInfoSummaries]
    def create_contract(request, opts = {})
      data, _status_code, _headers = create_contract_with_http_info(request, opts)
      return data
    end

    # Create a new contract
    # Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeezUPCommonInfoSummaries, Fixnum, Hash)>] BeezUPCommonInfoSummaries data, response status code and response headers
    def create_contract_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.create_contract ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.create_contract" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/contracts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeezUPCommonInfoSummaries')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#create_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new store
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [LinksGetStoresLink]
    def create_store(request, opts = {})
      data, _status_code, _headers = create_store_with_http_info(request, opts)
      return data
    end

    # Create a new store
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinksGetStoresLink, Fixnum, Hash)>] LinksGetStoresLink data, response status code and response headers
    def create_store_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.create_store ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.create_store" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LinksGetStoresLink')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#create_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete your next contract
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_next_contract(opts = {})
      delete_next_contract_with_http_info(opts)
      return nil
    end

    # Delete your next contract
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_next_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.delete_next_contract ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/contracts/next".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#delete_next_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a share to another user
    # 
    # @param store_id Your store identifier
    # @param user_id The friend user id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_share(store_id, user_id, opts = {})
      delete_share_with_http_info(store_id, user_id, opts)
      return nil
    end

    # Delete a share to another user
    # 
    # @param store_id Your store identifier
    # @param user_id The friend user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_share_with_http_info(store_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.delete_share ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.delete_share" if store_id.nil?
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling V2UserCustomerApi.delete_share" if user_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/shares/{userId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#delete_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_store(store_id, opts = {})
      delete_store_with_http_info(store_id, opts)
      return nil
    end

    # Delete a store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_store_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.delete_store ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.delete_store" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#delete_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get billing periods conditions
    # 
    # @param [Hash] opts the optional parameters
    # @return [BillingPeriods]
    def get_billing_periods(opts = {})
      data, _status_code, _headers = get_billing_periods_with_http_info(opts)
      return data
    end

    # Get billing periods conditions
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingPeriods, Fixnum, Hash)>] BillingPeriods data, response status code and response headers
    def get_billing_periods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_billing_periods ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/billingPeriods".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BillingPeriods')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_billing_periods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get contract list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Contracts]
    def get_contracts(opts = {})
      data, _status_code, _headers = get_contracts_with_http_info(opts)
      return data
    end

    # Get contract list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Contracts, Fixnum, Hash)>] Contracts data, response status code and response headers
    def get_contracts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_contracts ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/contracts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Contracts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_contracts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get credit card information
    # 
    # @param [Hash] opts the optional parameters
    # @return [CreditCardInfoResponse]
    def get_credit_card_info(opts = {})
      data, _status_code, _headers = get_credit_card_info_with_http_info(opts)
      return data
    end

    # Get credit card information
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreditCardInfoResponse, Fixnum, Hash)>] CreditCardInfoResponse data, response status code and response headers
    def get_credit_card_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_credit_card_info ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/account/creditCardInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreditCardInfoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_credit_card_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get friend information
    # 
    # @param user_id Your friend user id
    # @param [Hash] opts the optional parameters
    # @return [UserFriendInfo]
    def get_friend_info(user_id, opts = {})
      data, _status_code, _headers = get_friend_info_with_http_info(user_id, opts)
      return data
    end

    # Get friend information
    # 
    # @param user_id Your friend user id
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserFriendInfo, Fixnum, Hash)>] UserFriendInfo data, response status code and response headers
    def get_friend_info_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_friend_info ..."
      end
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling V2UserCustomerApi.get_friend_info" if user_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/friends/{userId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserFriendInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_friend_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all your invoices
    # 
    # @param [Hash] opts the optional parameters
    # @return [Invoices]
    def get_invoices(opts = {})
      data, _status_code, _headers = get_invoices_with_http_info(opts)
      return data
    end

    # Get all your invoices
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Invoices, Fixnum, Hash)>] Invoices data, response status code and response headers
    def get_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_invoices ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/invoices".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Invoices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get offer pricing
    # Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Offer]
    def get_offer(request, opts = {})
      data, _status_code, _headers = get_offer_with_http_info(request, opts)
      return data
    end

    # Get offer pricing
    # Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Offer, Fixnum, Hash)>] Offer data, response status code and response headers
    def get_offer_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_offer ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.get_offer" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/offers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Offer')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_offer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store's rights
    # 
    # @param store_id Your store identifier
    # @param functionality_code_list The functionality code list you want to check
    # @param [Hash] opts the optional parameters
    # @return [Array<FunctionalityRightInfo>]
    def get_rights(store_id, functionality_code_list, opts = {})
      data, _status_code, _headers = get_rights_with_http_info(store_id, functionality_code_list, opts)
      return data
    end

    # Get store&#39;s rights
    # 
    # @param store_id Your store identifier
    # @param functionality_code_list The functionality code list you want to check
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FunctionalityRightInfo>, Fixnum, Hash)>] Array<FunctionalityRightInfo> data, response status code and response headers
    def get_rights_with_http_info(store_id, functionality_code_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_rights ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.get_rights" if store_id.nil?
      # verify the required parameter 'functionality_code_list' is set
      fail ArgumentError, "Missing the required parameter 'functionality_code_list' when calling V2UserCustomerApi.get_rights" if functionality_code_list.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/rights".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(functionality_code_list)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<FunctionalityRightInfo>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_rights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get shares related to this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreShares]
    def get_shares(store_id, opts = {})
      data, _status_code, _headers = get_shares_with_http_info(store_id, opts)
      return data
    end

    # Get shares related to this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreShares, Fixnum, Hash)>] StoreShares data, response status code and response headers
    def get_shares_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_shares ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.get_shares" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/shares".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreShares')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all standard offers
    # 
    # @param [Hash] opts the optional parameters
    # @return [StandardOffers]
    def get_standard_offers(opts = {})
      data, _status_code, _headers = get_standard_offers_with_http_info(opts)
      return data
    end

    # Get all standard offers
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardOffers, Fixnum, Hash)>] StandardOffers data, response status code and response headers
    def get_standard_offers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_standard_offers ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/offers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardOffers')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_standard_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store's information
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreHeader]
    def get_store(store_id, opts = {})
      data, _status_code, _headers = get_store_with_http_info(store_id, opts)
      return data
    end

    # Get store&#39;s information
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreHeader, Fixnum, Hash)>] StoreHeader data, response status code and response headers
    def get_store_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_store ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.get_store" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreHeader')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store's alerts
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreAlerts]
    def get_store_alerts(store_id, opts = {})
      data, _status_code, _headers = get_store_alerts_with_http_info(store_id, opts)
      return data
    end

    # Get store&#39;s alerts
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreAlerts, Fixnum, Hash)>] StoreAlerts data, response status code and response headers
    def get_store_alerts_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_store_alerts ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.get_store_alerts" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/alerts".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreAlerts')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_store_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Stores]
    def get_stores(opts = {})
      data, _status_code, _headers = get_stores_with_http_info(opts)
      return data
    end

    # Get store list
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Stores, Fixnum, Hash)>] Stores data, response status code and response headers
    def get_stores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_stores ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/stores".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Stores')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user account information
    # 
    # @param [Hash] opts the optional parameters
    # @return [AccountInfo]
    def get_user_account_info(opts = {})
      data, _status_code, _headers = get_user_account_info_with_http_info(opts)
      return data
    end

    # Get user account information
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountInfo, Fixnum, Hash)>] AccountInfo data, response status code and response headers
    def get_user_account_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.get_user_account_info ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/account".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#get_user_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Log out the current user from go2
    # Log out the current user from go2
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def logout(opts = {})
      logout_with_http_info(opts)
      return nil
    end

    # Log out the current user from go2
    # Log out the current user from go2
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def logout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.logout ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/security/logout".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#logout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate your terminated contract.
    # By calling this operation you can re-enable the auto renewal.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reactivate_current_contract(opts = {})
      reactivate_current_contract_with_http_info(opts)
      return nil
    end

    # Reactivate your terminated contract.
    # By calling this operation you can re-enable the auto renewal.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reactivate_current_contract_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.reactivate_current_contract ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/contracts/current/reenableAutoRenewal".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#reactivate_current_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend email activation
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def resend_email_activation(opts = {})
      resend_email_activation_with_http_info(opts)
      return nil
    end

    # Resend email activation
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def resend_email_activation_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.resend_email_activation ..."
      end
      # resource path
      local_var_path = "/v2/user/customer/account/resendEmailActivation".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#resend_email_activation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change company information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_company_info(request, opts = {})
      save_company_info_with_http_info(request, opts)
      return nil
    end

    # Change company information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_company_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.save_company_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.save_company_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/companyInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#save_company_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save user credit card info
    # 
    # @param request Credit card info
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_credit_card_info(request, opts = {})
      save_credit_card_info_with_http_info(request, opts)
      return nil
    end

    # Save user credit card info
    # 
    # @param request Credit card info
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_credit_card_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.save_credit_card_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.save_credit_card_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/creditCardInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#save_credit_card_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save user personal information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_personal_info(request, opts = {})
      save_personal_info_with_http_info(request, opts)
      return nil
    end

    # Save user personal information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_personal_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.save_personal_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.save_personal_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/personalInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#save_personal_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change user picture information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_profile_picture_info(request, opts = {})
      save_profile_picture_info_with_http_info(request, opts)
      return nil
    end

    # Change user picture information
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_profile_picture_info_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.save_profile_picture_info ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.save_profile_picture_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/account/profilePictureInfo".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#save_profile_picture_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save store alert
    # 
    # @param store_id Your store identifier
    # @param alert_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_store_alert(store_id, alert_id, request, opts = {})
      save_store_alert_with_http_info(store_id, alert_id, request, opts)
      return nil
    end

    # Save store alert
    # 
    # @param store_id Your store identifier
    # @param alert_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_store_alert_with_http_info(store_id, alert_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.save_store_alert ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.save_store_alert" if store_id.nil?
      # verify the required parameter 'alert_id' is set
      fail ArgumentError, "Missing the required parameter 'alert_id' when calling V2UserCustomerApi.save_store_alert" if alert_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.save_store_alert" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/alerts/{alertId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'alertId' + '}', alert_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#save_store_alert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share a store to another user
    # 
    # @param store_id Your store identifier
    # @param email Your friend&#39;s email
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def share(store_id, email, opts = {})
      share_with_http_info(store_id, email, opts)
      return nil
    end

    # Share a store to another user
    # 
    # @param store_id Your store identifier
    # @param email Your friend&#39;s email
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def share_with_http_info(store_id, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.share ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.share" if store_id.nil?
      # verify the required parameter 'email' is set
      fail ArgumentError, "Missing the required parameter 'email' when calling V2UserCustomerApi.share" if email.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}/shares".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(email)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule termination of your current contract at the end of the commitment.
    # By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
    # @param request Indicate the termination reason
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def terminate_current_contract(request, opts = {})
      terminate_current_contract_with_http_info(request, opts)
      return nil
    end

    # Schedule termination of your current contract at the end of the commitment.
    # By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
    # @param request Indicate the termination reason
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def terminate_current_contract_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.terminate_current_contract ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.terminate_current_contract" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/contracts/current/disableAutoRenewal".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#terminate_current_contract\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update some store's information.
    # Update some store's information. FYI, you cannot change the country. 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_store(store_id, request, opts = {})
      update_store_with_http_info(store_id, request, opts)
      return nil
    end

    # Update some store&#39;s information.
    # Update some store&#39;s information. FYI, you cannot change the country. 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_store_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCustomerApi.update_store ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCustomerApi.update_store" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCustomerApi.update_store" if request.nil?
      # resource path
      local_var_path = "/v2/user/customer/stores/{storeId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCustomerApi#update_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
