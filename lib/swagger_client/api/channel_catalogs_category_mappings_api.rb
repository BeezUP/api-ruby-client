=begin
#Public - Security

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ChannelCatalogsCategoryMappingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get channel catalog categories
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogCategoryMappings]
    def get_channel_catalog_categories(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_categories_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get channel catalog categories
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogCategoryMappings, Fixnum, Hash)>] ChannelCatalogCategoryMappings data, response status code and response headers
    def get_channel_catalog_categories_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsCategoryMappingsApi.get_channel_catalog_categories ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsCategoryMappingsApi.get_channel_catalog_categories" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/user/channelCatalogs/{channelCatalogId}/categoryMappings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogCategoryMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsCategoryMappingsApi#get_channel_catalog_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def map_channel_catalog_category(channel_catalog_id, request, opts = {})
      map_channel_catalog_category_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Map channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def map_channel_catalog_category_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsCategoryMappingsApi.map_channel_catalog_category ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsCategoryMappingsApi.map_channel_catalog_category" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ChannelCatalogsCategoryMappingsApi.map_channel_catalog_category" if request.nil?
      # resource path
      local_var_path = "/user/channelCatalogs/{channelCatalogId}/categoryMappings/map".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsCategoryMappingsApi#map_channel_catalog_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unmap_channel_catalog_category(channel_catalog_id, request, opts = {})
      unmap_channel_catalog_category_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Unmap channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unmap_channel_catalog_category_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsCategoryMappingsApi.unmap_channel_catalog_category ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsCategoryMappingsApi.unmap_channel_catalog_category" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ChannelCatalogsCategoryMappingsApi.unmap_channel_catalog_category" if request.nil?
      # resource path
      local_var_path = "/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsCategoryMappingsApi#unmap_channel_catalog_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
