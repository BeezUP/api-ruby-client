=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class V2UserChannelCatalogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_cost_settings(channel_catalog_id, request, opts = {})
      configure_channel_catalog_cost_settings_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_cost_settings_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.configure_channel_catalog_cost_settings ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.configure_channel_catalog_cost_settings" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.configure_channel_catalog_cost_settings" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/settings/cost".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#configure_channel_catalog_cost_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure channel catalog exclusion filters
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_exclusion_filters(channel_catalog_id, request, opts = {})
      configure_channel_catalog_exclusion_filters_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Configure channel catalog exclusion filters
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_exclusion_filters_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.configure_channel_catalog_exclusion_filters ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.configure_channel_catalog_exclusion_filters" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.configure_channel_catalog_exclusion_filters" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#configure_channel_catalog_exclusion_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_channel_catalog_general_settings(channel_catalog_id, request, opts = {})
      configure_channel_catalog_general_settings_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_channel_catalog_general_settings_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.configure_channel_catalog_general_settings ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.configure_channel_catalog_general_settings" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.configure_channel_catalog_general_settings" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/settings/general".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#configure_channel_catalog_general_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new channel catalog
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def create_channel_catalog(request, opts = {})
      data, _status_code, _headers = create_channel_catalog_with_http_info(request, opts)
      return data
    end

    # Create a new channel catalog
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def create_channel_catalog_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.create_channel_catalog ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.create_channel_catalog" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#create_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the channel catalog
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_channel_catalog(opts = {})
      delete_channel_catalog_with_http_info(opts)
      return nil
    end

    # Delete the channel catalog
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_channel_catalog_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.delete_channel_catalog ..."
      end
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#delete_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific channel catalog product value override
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param channel_column_id The channel column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_channel_catalog_product_value_override(channel_catalog_id, product_id, channel_column_id, opts = {})
      delete_channel_catalog_product_value_override_with_http_info(channel_catalog_id, product_id, channel_column_id, opts)
      return nil
    end

    # Delete a specific channel catalog product value override
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param channel_column_id The channel column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_channel_catalog_product_value_override_with_http_info(channel_catalog_id, product_id, channel_column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.delete_channel_catalog_product_value_override ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.delete_channel_catalog_product_value_override" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserChannelCatalogsApi.delete_channel_catalog_product_value_override" if product_id.nil?
      # verify the required parameter 'channel_column_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_column_id' when calling V2UserChannelCatalogsApi.delete_channel_catalog_product_value_override" if channel_column_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s).sub('{' + 'channelColumnId' + '}', channel_column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#delete_channel_catalog_product_value_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_channel_catalog(channel_catalog_id, opts = {})
      disable_channel_catalog_with_http_info(channel_catalog_id, opts)
      return nil
    end

    # Disable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_channel_catalog_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.disable_channel_catalog ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.disable_channel_catalog" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/disable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#disable_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_channel_catalog_product(channel_catalog_id, product_id, opts = {})
      disable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts)
      return nil
    end

    # Disable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.disable_channel_catalog_product ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.disable_channel_catalog_product" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserChannelCatalogsApi.disable_channel_catalog_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#disable_channel_catalog_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_channel_catalog(channel_catalog_id, opts = {})
      enable_channel_catalog_with_http_info(channel_catalog_id, opts)
      return nil
    end

    # Enable a channel catalog
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_channel_catalog_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.enable_channel_catalog ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.enable_channel_catalog" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/enable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#enable_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the channel catalog information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalog]
    def get_channel_catalog(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get the channel catalog information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalog, Fixnum, Hash)>] ChannelCatalog data, response status code and response headers
    def get_channel_catalog_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.get_channel_catalog ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.get_channel_catalog" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalog')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#get_channel_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog categories
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogCategoryMappings]
    def get_channel_catalog_categories(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_categories_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get channel catalog categories
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogCategoryMappings, Fixnum, Hash)>] ChannelCatalogCategoryMappings data, response status code and response headers
    def get_channel_catalog_categories_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.get_channel_catalog_categories ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.get_channel_catalog_categories" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogCategoryMappings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#get_channel_catalog_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog exclusion filter operators
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<ExclusionFilterOperator>]
    def get_channel_catalog_exclusion_filter_operators(opts = {})
      data, _status_code, _headers = get_channel_catalog_exclusion_filter_operators_with_http_info(opts)
      return data
    end

    # Get channel catalog exclusion filter operators
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ExclusionFilterOperator>, Fixnum, Hash)>] Array<ExclusionFilterOperator> data, response status code and response headers
    def get_channel_catalog_exclusion_filter_operators_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.get_channel_catalog_exclusion_filter_operators ..."
      end
      # resource path
      local_var_path = "/v2/user/channelCatalogs/exclusionFilterOperators".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ExclusionFilterOperator>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#get_channel_catalog_exclusion_filter_operators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog product information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelCatalogProductInfo]
    def get_channel_catalog_product_info(channel_catalog_id, product_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_product_info_with_http_info(channel_catalog_id, product_id, opts)
      return data
    end

    # Get channel catalog product information
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelCatalogProductInfo, Fixnum, Hash)>] ChannelCatalogProductInfo data, response status code and response headers
    def get_channel_catalog_product_info_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.get_channel_catalog_product_info ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.get_channel_catalog_product_info" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserChannelCatalogsApi.get_channel_catalog_product_info" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogProductInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#get_channel_catalog_product_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel catalog product information list
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetChannelCatalogProductInfoListRequest] :request The channel catalog product list filter
    # @return [ChannelCatalogProductInfoList]
    def get_channel_catalog_product_info_list(channel_catalog_id, opts = {})
      data, _status_code, _headers = get_channel_catalog_product_info_list_with_http_info(channel_catalog_id, opts)
      return data
    end

    # Get channel catalog product information list
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetChannelCatalogProductInfoListRequest] :request The channel catalog product list filter
    # @return [Array<(ChannelCatalogProductInfoList, Fixnum, Hash)>] ChannelCatalogProductInfoList data, response status code and response headers
    def get_channel_catalog_product_info_list_with_http_info(channel_catalog_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.get_channel_catalog_product_info_list ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.get_channel_catalog_product_info_list" if channel_catalog_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogProductInfoList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#get_channel_catalog_product_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all your current channel catalogs
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id The store identifier
    # @return [ChannelCatalogList]
    def get_channel_catalogs(opts = {})
      data, _status_code, _headers = get_channel_catalogs_with_http_info(opts)
      return data
    end

    # List all your current channel catalogs
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id The store identifier
    # @return [Array<(ChannelCatalogList, Fixnum, Hash)>] ChannelCatalogList data, response status code and response headers
    def get_channel_catalogs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.get_channel_catalogs ..."
      end
      # resource path
      local_var_path = "/v2/user/channelCatalogs/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'storeId'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelCatalogList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#get_channel_catalogs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def map_channel_catalog_category(channel_catalog_id, request, opts = {})
      map_channel_catalog_category_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Map channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def map_channel_catalog_category_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.map_channel_catalog_category ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.map_channel_catalog_category" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.map_channel_catalog_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/map".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#map_channel_catalog_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure channel catalog column mappings
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def map_channel_catalog_columns(channel_catalog_id, request, opts = {})
      map_channel_catalog_columns_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Configure channel catalog column mappings
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def map_channel_catalog_columns_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.map_channel_catalog_columns ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.map_channel_catalog_columns" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.map_channel_catalog_columns" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/columnMappings".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#map_channel_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Override channel catalog product values
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def override_channel_catalog_product_overrides(channel_catalog_id, product_id, request, opts = {})
      override_channel_catalog_product_overrides_with_http_info(channel_catalog_id, product_id, request, opts)
      return nil
    end

    # Override channel catalog product values
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def override_channel_catalog_product_overrides_with_http_info(channel_catalog_id, product_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.override_channel_catalog_product_overrides ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.override_channel_catalog_product_overrides" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserChannelCatalogsApi.override_channel_catalog_product_overrides" if product_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.override_channel_catalog_product_overrides" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#override_channel_catalog_product_overrides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reenable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reenable_channel_catalog_product(channel_catalog_id, product_id, opts = {})
      reenable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts)
      return nil
    end

    # Reenable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reenable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.reenable_channel_catalog_product ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.reenable_channel_catalog_product" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserChannelCatalogsApi.reenable_channel_catalog_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#reenable_channel_catalog_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unmap_channel_catalog_category(channel_catalog_id, request, opts = {})
      unmap_channel_catalog_category_with_http_info(channel_catalog_id, request, opts)
      return nil
    end

    # Unmap channel catalog category
    # 
    # @param channel_catalog_id The channel catalog identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def unmap_channel_catalog_category_with_http_info(channel_catalog_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserChannelCatalogsApi.unmap_channel_catalog_category ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling V2UserChannelCatalogsApi.unmap_channel_catalog_category" if channel_catalog_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserChannelCatalogsApi.unmap_channel_catalog_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserChannelCatalogsApi#unmap_channel_catalog_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
