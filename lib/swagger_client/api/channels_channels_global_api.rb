=begin
#Public - Security

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ChannelsChannelsGlobalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List all available channel for this store
    # 
    # @param store_id The store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelHeader>]
    def get_available_channels(store_id, opts = {})
      data, _status_code, _headers = get_available_channels_with_http_info(store_id, opts)
      return data
    end

    # List all available channel for this store
    # 
    # @param store_id The store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelHeader>, Fixnum, Hash)>] Array<ChannelHeader> data, response status code and response headers
    def get_available_channels_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelsChannelsGlobalApi.get_available_channels ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling ChannelsChannelsGlobalApi.get_available_channels" if store_id.nil?
      # resource path
      local_var_path = "/user/channels/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'storeId'] = store_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelHeader>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelsChannelsGlobalApi#get_available_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel categories
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [ChannelRootCategory]
    def get_channel_categories(channel_id, accept_encoding, opts = {})
      data, _status_code, _headers = get_channel_categories_with_http_info(channel_id, accept_encoding, opts)
      return data
    end

    # Get channel categories
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelRootCategory, Fixnum, Hash)>] ChannelRootCategory data, response status code and response headers
    def get_channel_categories_with_http_info(channel_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelsChannelsGlobalApi.get_channel_categories ..."
      end
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChannelsChannelsGlobalApi.get_channel_categories" if channel_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ChannelsChannelsGlobalApi.get_channel_categories" if accept_encoding.nil?
      # resource path
      local_var_path = "/user/channels/{channelId}/categories".sub('{format}','json').sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelRootCategory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelsChannelsGlobalApi#get_channel_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel columns
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BeezUPCommonChannelColumnId>] :request Allow you to filter the channel column identifier list your want to get
    # @return [Array<ChannelColumn>]
    def get_channel_columns(channel_id, accept_encoding, opts = {})
      data, _status_code, _headers = get_channel_columns_with_http_info(channel_id, accept_encoding, opts)
      return data
    end

    # Get channel columns
    # 
    # @param channel_id The channel identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<BeezUPCommonChannelColumnId>] :request Allow you to filter the channel column identifier list your want to get
    # @return [Array<(Array<ChannelColumn>, Fixnum, Hash)>] Array<ChannelColumn> data, response status code and response headers
    def get_channel_columns_with_http_info(channel_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelsChannelsGlobalApi.get_channel_columns ..."
      end
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChannelsChannelsGlobalApi.get_channel_columns" if channel_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling ChannelsChannelsGlobalApi.get_channel_columns" if accept_encoding.nil?
      # resource path
      local_var_path = "/user/channels/{channelId}/columns".sub('{format}','json').sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelColumn>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelsChannelsGlobalApi#get_channel_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get channel information
    # 
    # @param channel_id The channel identifier
    # @param [Hash] opts the optional parameters
    # @return [ChannelInfo]
    def get_channel_info(channel_id, opts = {})
      data, _status_code, _headers = get_channel_info_with_http_info(channel_id, opts)
      return data
    end

    # Get channel information
    # 
    # @param channel_id The channel identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChannelInfo, Fixnum, Hash)>] ChannelInfo data, response status code and response headers
    def get_channel_info_with_http_info(channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelsChannelsGlobalApi.get_channel_info ..."
      end
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling ChannelsChannelsGlobalApi.get_channel_info" if channel_id.nil?
      # resource path
      local_var_path = "/user/channels/{channelId}".sub('{format}','json').sub('{' + 'channelId' + '}', channel_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChannelInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelsChannelsGlobalApi#get_channel_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
