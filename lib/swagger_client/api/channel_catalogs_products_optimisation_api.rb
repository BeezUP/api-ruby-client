=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class ChannelCatalogsProductsOptimisationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Disable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_channel_catalog_product(channel_catalog_id, product_id, opts = {})
      disable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts)
      return nil
    end

    # Disable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsProductsOptimisationApi.disable_channel_catalog_product ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsProductsOptimisationApi.disable_channel_catalog_product" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling ChannelCatalogsProductsOptimisationApi.disable_channel_catalog_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsProductsOptimisationApi#disable_channel_catalog_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reenable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reenable_channel_catalog_product(channel_catalog_id, product_id, opts = {})
      reenable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts)
      return nil
    end

    # Reenable channel catalog product
    # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
    # @param channel_catalog_id The channel catalog identifier
    # @param product_id The product identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reenable_channel_catalog_product_with_http_info(channel_catalog_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChannelCatalogsProductsOptimisationApi.reenable_channel_catalog_product ..."
      end
      # verify the required parameter 'channel_catalog_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_catalog_id' when calling ChannelCatalogsProductsOptimisationApi.reenable_channel_catalog_product" if channel_catalog_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling ChannelCatalogsProductsOptimisationApi.reenable_channel_catalog_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable".sub('{format}','json').sub('{' + 'channelCatalogId' + '}', channel_catalog_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChannelCatalogsProductsOptimisationApi#reenable_channel_catalog_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
