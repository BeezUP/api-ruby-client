=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class V2UserCatalogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Configure Auto Import Interval
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_configure_auto_import_interval(store_id, request, opts = {})
      auto_configure_auto_import_interval_with_http_info(store_id, request, opts)
      return nil
    end

    # Configure Auto Import Interval
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_configure_auto_import_interval_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_configure_auto_import_interval ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_configure_auto_import_interval" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.auto_configure_auto_import_interval" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/scheduling/interval".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_configure_auto_import_interval\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_delete_auto_import(store_id, opts = {})
      auto_delete_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Delete Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_delete_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_delete_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_delete_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_delete_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the auto import configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [AutoImportConfiguration]
    def auto_get_auto_import_configuration(store_id, opts = {})
      data, _status_code, _headers = auto_get_auto_import_configuration_with_http_info(store_id, opts)
      return data
    end

    # Get the auto import configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutoImportConfiguration, Fixnum, Hash)>] AutoImportConfiguration data, response status code and response headers
    def auto_get_auto_import_configuration_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_get_auto_import_configuration ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_get_auto_import_configuration" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutoImportConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_get_auto_import_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_pause_auto_import(store_id, opts = {})
      auto_pause_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Pause Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_pause_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_pause_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_pause_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/pause".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_pause_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_resume_auto_import(store_id, opts = {})
      auto_resume_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Resume Auto Import
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_resume_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_resume_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_resume_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/resume".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_resume_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure Auto Import Schedules
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auto_schedule_auto_import(store_id, request, opts = {})
      auto_schedule_auto_import_with_http_info(store_id, request, opts)
      return nil
    end

    # Configure Auto Import Schedules
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def auto_schedule_auto_import_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_schedule_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_schedule_auto_import" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.auto_schedule_auto_import" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_schedule_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Auto Import Manually
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def auto_start_auto_import(store_id, opts = {})
      data, _status_code, _headers = auto_start_auto_import_with_http_info(store_id, opts)
      return data
    end

    # Start Auto Import Manually
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def auto_start_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.auto_start_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.auto_start_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport/start".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#auto_start_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_catalog_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Catalog Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_catalog_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_change_catalog_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_change_catalog_column_user_name" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.catalog_change_catalog_column_user_name" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.catalog_change_catalog_column_user_name" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_change_catalog_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_expression(store_id, column_id, request, opts = {})
      catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_expression_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_change_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_change_custom_column_expression" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.catalog_change_custom_column_expression" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.catalog_change_custom_column_expression" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_change_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_change_custom_column_user_name(store_id, column_id, request, opts = {})
      catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Change Custom Column User Name
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_change_custom_column_user_name_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_change_custom_column_user_name ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_change_custom_column_user_name" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.catalog_change_custom_column_user_name" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.catalog_change_custom_column_user_name" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_change_custom_column_user_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_compute_expression(store_id, request, opts = {})
      data, _status_code, _headers = catalog_compute_expression_with_http_info(store_id, request, opts)
      return data
    end

    # Compute the expression for this catalog.
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_compute_expression_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_compute_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_compute_expression" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.catalog_compute_expression" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/computeExpression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_compute_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_delete_custom_column(store_id, column_id, opts = {})
      catalog_delete_custom_column_with_http_info(store_id, column_id, opts)
      return nil
    end

    # Delete custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_delete_custom_column_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_delete_custom_column" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.catalog_delete_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the BeezUP columns
    # Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPColumnConfiguration>]
    def catalog_get_beez_up_columns(opts = {})
      data, _status_code, _headers = catalog_get_beez_up_columns_with_http_info(opts)
      return data
    end

    # Get the BeezUP columns
    # Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPColumnConfiguration>, Fixnum, Hash)>] Array<BeezUPColumnConfiguration> data, response status code and response headers
    def catalog_get_beez_up_columns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_beez_up_columns ..."
      end
      # resource path
      local_var_path = "/v2/user/catalogs/beezupColumns".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPColumnConfiguration>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_beez_up_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CatalogColumns]
    def catalog_get_catalog_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_catalog_columns_with_http_info(store_id, opts)
      return data
    end

    # Get catalog column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogColumns, Fixnum, Hash)>] CatalogColumns data, response status code and response headers
    def catalog_get_catalog_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_catalog_columns" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/catalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CatalogColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Categories]
    def catalog_get_categories(store_id, accept_encoding, opts = {})
      data, _status_code, _headers = catalog_get_categories_with_http_info(store_id, accept_encoding, opts)
      return data
    end

    # Get category list
    # 
    # @param store_id Your store identifier
    # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Categories, Fixnum, Hash)>] Categories data, response status code and response headers
    def catalog_get_categories_with_http_info(store_id, accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_categories ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_categories" if store_id.nil?
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling V2UserCatalogsApi.catalog_get_categories" if accept_encoding.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/categories".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Categories')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def catalog_get_custom_column_expression(store_id, column_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def catalog_get_custom_column_expression_with_http_info(store_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_custom_column_expression" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.catalog_get_custom_column_expression" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [CustomColumns]
    def catalog_get_custom_columns(store_id, opts = {})
      data, _status_code, _headers = catalog_get_custom_columns_with_http_info(store_id, opts)
      return data
    end

    # Get custom column list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumns, Fixnum, Hash)>] CustomColumns data, response status code and response headers
    def catalog_get_custom_columns_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_custom_columns" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Product]
    def catalog_get_product(store_id, product_id, opts = {})
      data, _status_code, _headers = catalog_get_product_with_http_info(store_id, product_id, opts)
      return data
    end

    # Get product
    # 
    # @param store_id Your store identifier
    # @param product_id The product identifier you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(Product, Fixnum, Hash)>] Product data, response status code and response headers
    def catalog_get_product_with_http_info(store_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_product" if store_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserCatalogsApi.catalog_get_product" if product_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/products/{productId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Product')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetProductsRequest] :request 
    # @return [Products]
    def catalog_get_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_products_with_http_info(store_id, opts)
      return data
    end

    # Get product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [GetProductsRequest] :request 
    # @return [Array<(Products, Fixnum, Hash)>] Products data, response status code and response headers
    def catalog_get_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_products ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_products" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/products".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Products')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get random product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of random product you want to get (default to 100)
    # @return [Products]
    def catalog_get_random_products(store_id, opts = {})
      data, _status_code, _headers = catalog_get_random_products_with_http_info(store_id, opts)
      return data
    end

    # Get random product list
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The count of random product you want to get
    # @return [Array<(Products, Fixnum, Hash)>] Products data, response status code and response headers
    def catalog_get_random_products_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_get_random_products ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_get_random_products" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserCatalogsApi.catalog_get_random_products, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 25
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserCatalogsApi.catalog_get_random_products, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/products/random".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Products')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_get_random_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def catalog_save_custom_column(store_id, column_id, request, opts = {})
      catalog_save_custom_column_with_http_info(store_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def catalog_save_custom_column_with_http_info(store_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.catalog_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.catalog_save_custom_column" if store_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.catalog_save_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.catalog_save_custom_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#catalog_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate the auto importation of the last successful manual catalog importation.
    # Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_activate_auto_import(store_id, opts = {})
      importation_activate_auto_import_with_http_info(store_id, opts)
      return nil
    end

    # Activate the auto importation of the last successful manual catalog importation.
    # Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_activate_auto_import_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_activate_auto_import ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_activate_auto_import" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/autoImport".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_activate_auto_import\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_cancel(store_id, execution_id, opts = {})
      importation_cancel_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Cancel importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_cancel_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_cancel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_cancel" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_cancel" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit Importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_commit(store_id, execution_id, opts = {})
      importation_commit_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Commit Importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_commit_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_commit ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_commit" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_commit" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/commit".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_commit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit columns
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_commit_columns(store_id, execution_id, opts = {})
      importation_commit_columns_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Commit columns
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_commit_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_commit_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_commit_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_commit_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_commit_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_configure_catalog_column(store_id, execution_id, column_id, request, opts = {})
      importation_configure_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Configure catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_configure_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_configure_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_configure_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_configure_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_configure_catalog_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.importation_configure_catalog_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_configure_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure remaining catalog columns
    # This operation should be used after you have mapped the required BeezUP Columns
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_configure_remaining_catalog_columns(store_id, execution_id, opts = {})
      importation_configure_remaining_catalog_columns_with_http_info(store_id, execution_id, opts)
      return nil
    end

    # Configure remaining catalog columns
    # This operation should be used after you have mapped the required BeezUP Columns
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_configure_remaining_catalog_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_configure_remaining_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_configure_remaining_catalog_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_configure_remaining_catalog_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_configure_remaining_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Custom Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_delete_custom_column(store_id, execution_id, column_id, opts = {})
      importation_delete_custom_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Delete Custom Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_delete_custom_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_delete_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_delete_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_delete_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def importation_get_custom_column_expression(store_id, execution_id, column_id, opts = {})
      data, _status_code, _headers = importation_get_custom_column_expression_with_http_info(store_id, execution_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def importation_get_custom_column_expression_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_custom_column_expression" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_get_custom_column_expression" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_get_custom_column_expression" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom columns currently place in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [CustomColumns]
    def importation_get_custom_columns(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_custom_columns_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get custom columns currently place in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumns, Fixnum, Hash)>] CustomColumns data, response status code and response headers
    def importation_get_custom_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_custom_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_get_custom_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detected catalog columns during this importation.
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [DetectedCatalogColumns]
    def importation_get_detected_catalog_columns(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_detected_catalog_columns_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get detected catalog columns during this importation.
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectedCatalogColumns, Fixnum, Hash)>] DetectedCatalogColumns data, response status code and response headers
    def importation_get_detected_catalog_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_detected_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_detected_catalog_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_get_detected_catalog_columns" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetectedCatalogColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_detected_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the importation status
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [ImportationMonitoring]
    def importation_get_importation_monitoring(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_importation_monitoring_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get the importation status
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportationMonitoring, Fixnum, Hash)>] ImportationMonitoring data, response status code and response headers
    def importation_get_importation_monitoring_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_importation_monitoring ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_importation_monitoring" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_get_importation_monitoring" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportationMonitoring')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_importation_monitoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [LastManualImportInputConfiguration]
    def importation_get_manual_update_last_input_config(store_id, opts = {})
      data, _status_code, _headers = importation_get_manual_update_last_input_config_with_http_info(store_id, opts)
      return data
    end

    # Get the last input configuration
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(LastManualImportInputConfiguration, Fixnum, Hash)>] LastManualImportInputConfiguration data, response status code and response headers
    def importation_get_manual_update_last_input_config_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_manual_update_last_input_config ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_manual_update_last_input_config" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/inputConfiguration".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LastManualImportInputConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_manual_update_last_input_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the product sample related to this importation with all columns (catalog and custom)
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param [Hash] opts the optional parameters
    # @return [ProductSample]
    def importation_get_product_sample(store_id, execution_id, product_sample_index, opts = {})
      data, _status_code, _headers = importation_get_product_sample_with_http_info(store_id, execution_id, product_sample_index, opts)
      return data
    end

    # Get the product sample related to this importation with all columns (catalog and custom)
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductSample, Fixnum, Hash)>] ProductSample data, response status code and response headers
    def importation_get_product_sample_with_http_info(store_id, execution_id, product_sample_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_product_sample ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_product_sample" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_get_product_sample" if execution_id.nil?
      # verify the required parameter 'product_sample_index' is set
      fail ArgumentError, "Missing the required parameter 'product_sample_index' when calling V2UserCatalogsApi.importation_get_product_sample" if product_sample_index.nil?
      if product_sample_index > 99
        fail ArgumentError, 'invalid value for "product_sample_index" when calling V2UserCatalogsApi.importation_get_product_sample, must be smaller than or equal to 99.'
      end

      if product_sample_index < 0
        fail ArgumentError, 'invalid value for "product_sample_index" when calling V2UserCatalogsApi.importation_get_product_sample, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'productSampleIndex' + '}', product_sample_index.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductSample')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_product_sample\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product sample custom column value related to this importation.
    # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def importation_get_product_sample_custom_column_value(store_id, execution_id, product_sample_index, column_id, opts = {})
      data, _status_code, _headers = importation_get_product_sample_custom_column_value_with_http_info(store_id, execution_id, product_sample_index, column_id, opts)
      return data
    end

    # Get product sample custom column value related to this importation.
    # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def importation_get_product_sample_custom_column_value_with_http_info(store_id, execution_id, product_sample_index, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_product_sample_custom_column_value ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_product_sample_custom_column_value" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_get_product_sample_custom_column_value" if execution_id.nil?
      # verify the required parameter 'product_sample_index' is set
      fail ArgumentError, "Missing the required parameter 'product_sample_index' when calling V2UserCatalogsApi.importation_get_product_sample_custom_column_value" if product_sample_index.nil?
      if product_sample_index > 99
        fail ArgumentError, 'invalid value for "product_sample_index" when calling V2UserCatalogsApi.importation_get_product_sample_custom_column_value, must be smaller than or equal to 99.'
      end

      if product_sample_index < 0
        fail ArgumentError, 'invalid value for "product_sample_index" when calling V2UserCatalogsApi.importation_get_product_sample_custom_column_value, must be greater than or equal to 0.'
      end

      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_get_product_sample_custom_column_value" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'productSampleIndex' + '}', product_sample_index.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_product_sample_custom_column_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest catalog importation reporting
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<ImportationReporting>]
    def importation_get_reportings(store_id, opts = {})
      data, _status_code, _headers = importation_get_reportings_with_http_info(store_id, opts)
      return data
    end

    # Get the latest catalog importation reporting
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ImportationReporting>, Fixnum, Hash)>] Array<ImportationReporting> data, response status code and response headers
    def importation_get_reportings_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_get_reportings ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_get_reportings" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ImportationReporting>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_get_reportings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ignore Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_ignore_column(store_id, execution_id, column_id, opts = {})
      importation_ignore_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Ignore Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_ignore_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_ignore_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_ignore_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_ignore_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_ignore_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_ignore_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map catalog column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_map_catalog_column(store_id, execution_id, column_id, request, opts = {})
      importation_map_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Map catalog column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_map_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_map_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_map_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_map_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_map_catalog_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.importation_map_catalog_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_map_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map custom column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_map_custom_column(store_id, execution_id, column_id, request, opts = {})
      importation_map_custom_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Map custom column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_map_custom_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_map_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_map_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_map_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_map_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.importation_map_custom_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_map_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reattend Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_reattend_column(store_id, execution_id, column_id, opts = {})
      importation_reattend_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Reattend Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_reattend_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_reattend_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_reattend_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_reattend_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_reattend_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_reattend_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_save_custom_column(store_id, execution_id, column_id, request, opts = {})
      importation_save_custom_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_save_custom_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_save_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_save_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_save_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.importation_save_custom_column" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Manual Import
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def importation_start_manual_update(store_id, request, opts = {})
      data, _status_code, _headers = importation_start_manual_update_with_http_info(store_id, request, opts)
      return data
    end

    # Start Manual Import
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def importation_start_manual_update_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_start_manual_update ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_start_manual_update" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserCatalogsApi.importation_start_manual_update" if request.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_start_manual_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get technical progression
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [ImportationTechnicalProgression]
    def importation_technical_progression(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_technical_progression_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get technical progression
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportationTechnicalProgression, Fixnum, Hash)>] ImportationTechnicalProgression data, response status code and response headers
    def importation_technical_progression_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_technical_progression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_technical_progression" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_technical_progression" if execution_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportationTechnicalProgression')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_technical_progression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_unmap_catalog_column(store_id, execution_id, column_id, opts = {})
      importation_unmap_catalog_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Unmap catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_unmap_catalog_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_unmap_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_unmap_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_unmap_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_unmap_catalog_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_unmap_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_unmap_custom_column(store_id, execution_id, column_id, opts = {})
      importation_unmap_custom_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Unmap custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_unmap_custom_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserCatalogsApi.importation_unmap_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserCatalogsApi.importation_unmap_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling V2UserCatalogsApi.importation_unmap_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling V2UserCatalogsApi.importation_unmap_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserCatalogsApi#importation_unmap_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
