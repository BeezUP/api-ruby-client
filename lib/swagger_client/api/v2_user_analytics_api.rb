=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class V2UserAnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Rule creation
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_rule(store_id, request, opts = {})
      create_rule_with_http_info(store_id, request, opts)
      return nil
    end

    # Rule creation
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_rule_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.create_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.create_rule" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.create_rule" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#create_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_report_filter(store_id, report_filter_id, opts = {})
      delete_report_filter_with_http_info(store_id, report_filter_id, opts)
      return nil
    end

    # Delete the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_report_filter_with_http_info(store_id, report_filter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.delete_report_filter ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.delete_report_filter" if store_id.nil?
      # verify the required parameter 'report_filter_id' is set
      fail ArgumentError, "Missing the required parameter 'report_filter_id' when calling V2UserAnalyticsApi.delete_report_filter" if report_filter_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'reportFilterId' + '}', report_filter_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#delete_report_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rule(store_id, rule_id, opts = {})
      delete_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Delete Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.delete_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.delete_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.delete_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_rule(store_id, rule_id, opts = {})
      disable_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Disable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.disable_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.disable_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.disable_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/disable".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#disable_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_rule(store_id, rule_id, opts = {})
      enable_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Enable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.enable_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.enable_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.enable_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/enable".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#enable_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export the report by category
    # Export the report by category
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def export_store_report_by_category(store_id, format, request, opts = {})
      data, _status_code, _headers = export_store_report_by_category_with_http_info(store_id, format, request, opts)
      return data
    end

    # Export the report by category
    # Export the report by category
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def export_store_report_by_category_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.export_store_report_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.export_store_report_by_category" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling V2UserAnalyticsApi.export_store_report_by_category" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.export_store_report_by_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bycategory/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#export_store_report_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export the report by channel
    # Export the report by channel
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def export_store_report_by_channel(store_id, format, request, opts = {})
      data, _status_code, _headers = export_store_report_by_channel_with_http_info(store_id, format, request, opts)
      return data
    end

    # Export the report by channel
    # Export the report by channel
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def export_store_report_by_channel_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.export_store_report_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.export_store_report_by_channel" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling V2UserAnalyticsApi.export_store_report_by_channel" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.export_store_report_by_channel" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bychannel/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#export_store_report_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export the report by product
    # Export the report by product
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def export_store_report_by_product(store_id, format, request, opts = {})
      data, _status_code, _headers = export_store_report_by_product_with_http_info(store_id, format, request, opts)
      return data
    end

    # Export the report by product
    # Export the report by product
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def export_store_report_by_product_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.export_store_report_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.export_store_report_by_product" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling V2UserAnalyticsApi.export_store_report_by_product" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.export_store_report_by_product" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byproduct/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#export_store_report_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report filter description
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [ReportFilter]
    def get_report_filter(store_id, report_filter_id, opts = {})
      data, _status_code, _headers = get_report_filter_with_http_info(store_id, report_filter_id, opts)
      return data
    end

    # Get the report filter description
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportFilter, Fixnum, Hash)>] ReportFilter data, response status code and response headers
    def get_report_filter_with_http_info(store_id, report_filter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_report_filter ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_report_filter" if store_id.nil?
      # verify the required parameter 'report_filter_id' is set
      fail ArgumentError, "Missing the required parameter 'report_filter_id' when calling V2UserAnalyticsApi.get_report_filter" if report_filter_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'reportFilterId' + '}', report_filter_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportFilter')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_report_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get report filter list for the given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [ReportFilters]
    def get_report_filters(store_id, opts = {})
      data, _status_code, _headers = get_report_filters_with_http_info(store_id, opts)
      return data
    end

    # Get report filter list for the given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportFilters, Fixnum, Hash)>] ReportFilters data, response status code and response headers
    def get_report_filters_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_report_filters ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_report_filters" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportFilters')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_report_filters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_rule(store_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(store_id, rule_id, opts)
      return data
    end

    # Gets the rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.get_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of rules for a given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Rules]
    def get_rules(store_id, opts = {})
      data, _status_code, _headers = get_rules_with_http_info(store_id, opts)
      return data
    end

    # Gets the list of rules for a given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rules, Fixnum, Hash)>] Rules data, response status code and response headers
    def get_rules_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_rules ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_rules" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rules')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the rules execution history
    # 
    # @param store_id Your store identifier
    # @param page_number The page to retrieve
    # @param page_size The count of rule history to retrieve
    # @param [Hash] opts the optional parameters
    # @return [RuleExecutionReportings]
    def get_rules_executions(store_id, page_number, page_size, opts = {})
      data, _status_code, _headers = get_rules_executions_with_http_info(store_id, page_number, page_size, opts)
      return data
    end

    # Get the rules execution history
    # 
    # @param store_id Your store identifier
    # @param page_number The page to retrieve
    # @param page_size The count of rule history to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleExecutionReportings, Fixnum, Hash)>] RuleExecutionReportings data, response status code and response headers
    def get_rules_executions_with_http_info(store_id, page_number, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_rules_executions ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_rules_executions" if store_id.nil?
      # verify the required parameter 'page_number' is set
      fail ArgumentError, "Missing the required parameter 'page_number' when calling V2UserAnalyticsApi.get_rules_executions" if page_number.nil?
      if page_number < 1
        fail ArgumentError, 'invalid value for "page_number" when calling V2UserAnalyticsApi.get_rules_executions, must be greater than or equal to 1.'
      end

      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling V2UserAnalyticsApi.get_rules_executions" if page_size.nil?
      if page_size > 100
        fail ArgumentError, 'invalid value for "page_size" when calling V2UserAnalyticsApi.get_rules_executions, must be smaller than or equal to 100.'
      end

      if page_size < 10
        fail ArgumentError, 'invalid value for "page_size" when calling V2UserAnalyticsApi.get_rules_executions, must be greater than or equal to 10.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/executions".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = page_number
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleExecutionReportings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_rules_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by category
    # Get the report by category
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByCategoryResponse]
    def get_store_report_by_category(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_category_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by category
    # Get the report by category
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByCategoryResponse, Fixnum, Hash)>] ReportByCategoryResponse data, response status code and response headers
    def get_store_report_by_category_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_report_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_report_by_category" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.get_store_report_by_category" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bycategory".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByCategoryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_report_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by channel
    # Get the report by channel
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByChannelResponse]
    def get_store_report_by_channel(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_channel_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by channel
    # Get the report by channel
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByChannelResponse, Fixnum, Hash)>] ReportByChannelResponse data, response status code and response headers
    def get_store_report_by_channel_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_report_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_report_by_channel" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.get_store_report_by_channel" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/bychannel".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByChannelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_report_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByDayResponse]
    def get_store_report_by_day(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_day_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByDayResponse, Fixnum, Hash)>] ReportByDayResponse data, response status code and response headers
    def get_store_report_by_day_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_report_by_day ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_report_by_day" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.get_store_report_by_day" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byday".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByDayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_report_by_day\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<BeezUPCommonLink2>]
    def get_store_report_by_day_export(store_id, format, request, opts = {})
      data, _status_code, _headers = get_store_report_by_day_export_with_http_info(store_id, format, request, opts)
      return data
    end

    # Get the report by day
    # Get the report by day
    # @param store_id Your store identifier
    # @param format 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeezUPCommonLink2>, Fixnum, Hash)>] Array<BeezUPCommonLink2> data, response status code and response headers
    def get_store_report_by_day_export_with_http_info(store_id, format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_report_by_day_export ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_report_by_day_export" if store_id.nil?
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling V2UserAnalyticsApi.get_store_report_by_day_export" if format.nil?
      # verify enum value
      unless ['xlsx', 'csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of xlsx, csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.get_store_report_by_day_export" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byday/export".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BeezUPCommonLink2>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_report_by_day_export\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the report by product
    # Get the report by product
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [ReportByProductResponse]
    def get_store_report_by_product(store_id, request, opts = {})
      data, _status_code, _headers = get_store_report_by_product_with_http_info(store_id, request, opts)
      return data
    end

    # Get the report by product
    # Get the report by product
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportByProductResponse, Fixnum, Hash)>] ReportByProductResponse data, response status code and response headers
    def get_store_report_by_product_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_report_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_report_by_product" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.get_store_report_by_product" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/byproduct".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportByProductResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_report_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest clicks tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The click&#39;s count you want to get (default to 100)
    # @return [TrackedClicks]
    def get_store_tracked_clicks(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_clicks_with_http_info(store_id, opts)
      return data
    end

    # Get the latest clicks tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The click&#39;s count you want to get
    # @return [Array<(TrackedClicks, Fixnum, Hash)>] TrackedClicks data, response status code and response headers
    def get_store_tracked_clicks_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_tracked_clicks ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_tracked_clicks" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserAnalyticsApi.get_store_tracked_clicks, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserAnalyticsApi.get_store_tracked_clicks, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/clicks".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedClicks')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_tracked_clicks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest external orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The external order&#39;s count you want to get (default to 100)
    # @return [TrackedExternalOrders]
    def get_store_tracked_external_orders(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_external_orders_with_http_info(store_id, opts)
      return data
    end

    # Get the latest external orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The external order&#39;s count you want to get
    # @return [Array<(TrackedExternalOrders, Fixnum, Hash)>] TrackedExternalOrders data, response status code and response headers
    def get_store_tracked_external_orders_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_tracked_external_orders ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_tracked_external_orders" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserAnalyticsApi.get_store_tracked_external_orders, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserAnalyticsApi.get_store_tracked_external_orders, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/externalorders".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedExternalOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_tracked_external_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The order&#39;s count you want to get (default to 100)
    # @return [TrackedOrders]
    def get_store_tracked_orders(store_id, opts = {})
      data, _status_code, _headers = get_store_tracked_orders_with_http_info(store_id, opts)
      return data
    end

    # Get the latest orders tracked
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count The order&#39;s count you want to get
    # @return [Array<(TrackedOrders, Fixnum, Hash)>] TrackedOrders data, response status code and response headers
    def get_store_tracked_orders_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_tracked_orders ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_tracked_orders" if store_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserAnalyticsApi.get_store_tracked_orders, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 5
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling V2UserAnalyticsApi.get_store_tracked_orders, must be greater than or equal to 5.'
      end

      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/orders".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackedOrders')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_tracked_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get store tracking synchronization status
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [StoreTrackingStatus]
    def get_store_tracking_status(store_id, opts = {})
      data, _status_code, _headers = get_store_tracking_status_with_http_info(store_id, opts)
      return data
    end

    # Get store tracking synchronization status
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreTrackingStatus, Fixnum, Hash)>] StoreTrackingStatus data, response status code and response headers
    def get_store_tracking_status_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_store_tracking_status ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.get_store_tracking_status" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/tracking/status".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StoreTrackingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_store_tracking_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Display the synchronization status of the clicks and orders
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
    # @param [Hash] opts the optional parameters
    # @return [TrackingStatus]
    def get_tracking_status(opts = {})
      data, _status_code, _headers = get_tracking_status_with_http_info(opts)
      return data
    end

    # Display the synchronization status of the clicks and orders
    # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrackingStatus, Fixnum, Hash)>] TrackingStatus data, response status code and response headers
    def get_tracking_status_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.get_tracking_status ..."
      end
      # resource path
      local_var_path = "/v2/user/analytics/tracking/status".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrackingStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#get_tracking_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the rule down
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_down_rule(store_id, rule_id, opts = {})
      move_down_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Move the rule down
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_down_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.move_down_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.move_down_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.move_down_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/movedown".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#move_down_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the rule up
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_up_rule(store_id, rule_id, opts = {})
      move_up_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Move the rule up
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_up_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.move_up_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.move_up_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.move_up_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/moveup".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#move_up_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise(store_id, action_name, request, opts = {})
      optimise_with_http_info(store_id, action_name, request, opts)
      return nil
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
    # @param store_id Your store identifier
    # @param action_name 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_with_http_info(store_id, action_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.optimise ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.optimise" if store_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling V2UserAnalyticsApi.optimise" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.optimise" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#optimise\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products's category
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable products's category for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param catalog_category_id The category identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [nil]
    def optimise_by_category(store_id, catalog_category_id, action_name, opts = {})
      optimise_by_category_with_http_info(store_id, catalog_category_id, action_name, opts)
      return nil
    end

    # Optimise products&#39;s category
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param catalog_category_id The category identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_category_with_http_info(store_id, catalog_category_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.optimise_by_category ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.optimise_by_category" if store_id.nil?
      # verify the required parameter 'catalog_category_id' is set
      fail ArgumentError, "Missing the required parameter 'catalog_category_id' when calling V2UserAnalyticsApi.optimise_by_category" if catalog_category_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling V2UserAnalyticsApi.optimise_by_category" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'catalogCategoryId' + '}', catalog_category_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#optimise_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products's category
    # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
    # @param store_id Your store identifier
    # @param channel_id The channel identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def optimise_by_channel(store_id, channel_id, action_name, opts = {})
      optimise_by_channel_with_http_info(store_id, channel_id, action_name, opts)
      return nil
    end

    # Optimise products&#39;s category
    # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
    # @param store_id Your store identifier
    # @param channel_id The channel identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_channel_with_http_info(store_id, channel_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.optimise_by_channel ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.optimise_by_channel" if store_id.nil?
      # verify the required parameter 'channel_id' is set
      fail ArgumentError, "Missing the required parameter 'channel_id' when calling V2UserAnalyticsApi.optimise_by_channel" if channel_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling V2UserAnalyticsApi.optimise_by_channel" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'channelId' + '}', channel_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#optimise_by_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param product_id The product identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [nil]
    def optimise_by_product(store_id, product_id, action_name, opts = {})
      optimise_by_product_with_http_info(store_id, product_id, action_name, opts)
      return nil
    end

    # Optimise products
    # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
    # @param store_id Your store identifier
    # @param product_id The product identifier concerned by this optimisation
    # @param action_name 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def optimise_by_product_with_http_info(store_id, product_id, action_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.optimise_by_product ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.optimise_by_product" if store_id.nil?
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling V2UserAnalyticsApi.optimise_by_product" if product_id.nil?
      # verify the required parameter 'action_name' is set
      fail ArgumentError, "Missing the required parameter 'action_name' when calling V2UserAnalyticsApi.optimise_by_product" if action_name.nil?
      # verify enum value
      unless ['reenable', 'disable'].include?(action_name)
        fail ArgumentError, "invalid value for 'action_name', must be one of reenable, disable"
      end
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'productId' + '}', product_id.to_s).sub('{' + 'actionName' + '}', action_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#optimise_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_rule(store_id, rule_id, opts = {})
      run_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Run rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.run_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.run_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.run_rule" if rule_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}/run".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#run_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run all rules for this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_rules(store_id, opts = {})
      run_rules_with_http_info(store_id, opts)
      return nil
    end

    # Run all rules for this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_rules_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.run_rules ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.run_rules" if store_id.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/run".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#run_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param report_filter 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_report_filter(store_id, report_filter_id, report_filter, opts = {})
      save_report_filter_with_http_info(store_id, report_filter_id, report_filter, opts)
      return nil
    end

    # Save the report filter
    # 
    # @param store_id Your store identifier
    # @param report_filter_id Your report filter identifier
    # @param report_filter 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_report_filter_with_http_info(store_id, report_filter_id, report_filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.save_report_filter ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.save_report_filter" if store_id.nil?
      # verify the required parameter 'report_filter_id' is set
      fail ArgumentError, "Missing the required parameter 'report_filter_id' when calling V2UserAnalyticsApi.save_report_filter" if report_filter_id.nil?
      # verify the required parameter 'report_filter' is set
      fail ArgumentError, "Missing the required parameter 'report_filter' when calling V2UserAnalyticsApi.save_report_filter" if report_filter.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/reports/filters/{reportFilterId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'reportFilterId' + '}', report_filter_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(report_filter)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#save_report_filter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_rule(store_id, rule_id, request, opts = {})
      update_rule_with_http_info(store_id, rule_id, request, opts)
      return nil
    end

    # Update Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_rule_with_http_info(store_id, rule_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserAnalyticsApi.update_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling V2UserAnalyticsApi.update_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling V2UserAnalyticsApi.update_rule" if rule_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserAnalyticsApi.update_rule" if request.nil?
      # resource path
      local_var_path = "/v2/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserAnalyticsApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
