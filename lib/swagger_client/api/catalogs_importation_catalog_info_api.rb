=begin
#BeezUP API

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class CatalogsImportationCatalogInfoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Configure catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_configure_catalog_column(store_id, execution_id, column_id, request, opts = {})
      importation_configure_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Configure catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_configure_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_configure_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_configure_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_configure_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_configure_catalog_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsImportationCatalogInfoApi.importation_configure_catalog_column" if request.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_configure_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Custom Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_delete_custom_column(store_id, execution_id, column_id, opts = {})
      importation_delete_custom_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Delete Custom Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_delete_custom_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_delete_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_delete_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_delete_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_delete_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_delete_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the encrypted custom column expression in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def importation_get_custom_column_expression(store_id, execution_id, column_id, opts = {})
      data, _status_code, _headers = importation_get_custom_column_expression_with_http_info(store_id, execution_id, column_id, opts)
      return data
    end

    # Get the encrypted custom column expression in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def importation_get_custom_column_expression_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_get_custom_column_expression ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_get_custom_column_expression" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_get_custom_column_expression" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_get_custom_column_expression" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_get_custom_column_expression\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom columns currently place in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [CustomColumns]
    def importation_get_custom_columns(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_custom_columns_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get custom columns currently place in this importation
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomColumns, Fixnum, Hash)>] CustomColumns data, response status code and response headers
    def importation_get_custom_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_get_custom_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_get_custom_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_get_custom_columns" if execution_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/customColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CustomColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_get_custom_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get detected catalog columns during this importation.
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [DetectedCatalogColumns]
    def importation_get_detected_catalog_columns(store_id, execution_id, opts = {})
      data, _status_code, _headers = importation_get_detected_catalog_columns_with_http_info(store_id, execution_id, opts)
      return data
    end

    # Get detected catalog columns during this importation.
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectedCatalogColumns, Fixnum, Hash)>] DetectedCatalogColumns data, response status code and response headers
    def importation_get_detected_catalog_columns_with_http_info(store_id, execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_get_detected_catalog_columns ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_get_detected_catalog_columns" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_get_detected_catalog_columns" if execution_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DetectedCatalogColumns')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_get_detected_catalog_columns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the product sample related to this importation with all columns (catalog and custom)
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param [Hash] opts the optional parameters
    # @return [ProductSample]
    def importation_get_product_sample(store_id, execution_id, product_sample_index, opts = {})
      data, _status_code, _headers = importation_get_product_sample_with_http_info(store_id, execution_id, product_sample_index, opts)
      return data
    end

    # Get the product sample related to this importation with all columns (catalog and custom)
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductSample, Fixnum, Hash)>] ProductSample data, response status code and response headers
    def importation_get_product_sample_with_http_info(store_id, execution_id, product_sample_index, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_get_product_sample ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample" if execution_id.nil?
      # verify the required parameter 'product_sample_index' is set
      fail ArgumentError, "Missing the required parameter 'product_sample_index' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample" if product_sample_index.nil?
      if product_sample_index > 99
        fail ArgumentError, 'invalid value for "product_sample_index" when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample, must be smaller than or equal to 99.'
      end

      if product_sample_index < 0
        fail ArgumentError, 'invalid value for "product_sample_index" when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'productSampleIndex' + '}', product_sample_index.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductSample')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_get_product_sample\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get product sample custom column value related to this importation.
    # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [String]
    def importation_get_product_sample_custom_column_value(store_id, execution_id, product_sample_index, column_id, opts = {})
      data, _status_code, _headers = importation_get_product_sample_custom_column_value_with_http_info(store_id, execution_id, product_sample_index, column_id, opts)
      return data
    end

    # Get product sample custom column value related to this importation.
    # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param product_sample_index Index of the product sample. Starting from 0 to 99.
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def importation_get_product_sample_custom_column_value_with_http_info(store_id, execution_id, product_sample_index, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value" if execution_id.nil?
      # verify the required parameter 'product_sample_index' is set
      fail ArgumentError, "Missing the required parameter 'product_sample_index' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value" if product_sample_index.nil?
      if product_sample_index > 99
        fail ArgumentError, 'invalid value for "product_sample_index" when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value, must be smaller than or equal to 99.'
      end

      if product_sample_index < 0
        fail ArgumentError, 'invalid value for "product_sample_index" when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value, must be greater than or equal to 0.'
      end

      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_get_product_sample_custom_column_value" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'productSampleIndex' + '}', product_sample_index.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_get_product_sample_custom_column_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ignore Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_ignore_column(store_id, execution_id, column_id, opts = {})
      importation_ignore_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Ignore Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_ignore_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_ignore_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_ignore_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_ignore_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_ignore_column" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_ignore_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map catalog column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_map_catalog_column(store_id, execution_id, column_id, request, opts = {})
      importation_map_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Map catalog column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_map_catalog_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_map_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_map_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_map_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_map_catalog_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsImportationCatalogInfoApi.importation_map_catalog_column" if request.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_map_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map custom column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_map_custom_column(store_id, execution_id, column_id, request, opts = {})
      importation_map_custom_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Map custom column to a BeezUP column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_map_custom_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_map_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_map_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_map_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_map_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsImportationCatalogInfoApi.importation_map_custom_column" if request.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_map_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reattend Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_reattend_column(store_id, execution_id, column_id, opts = {})
      importation_reattend_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Reattend Column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_reattend_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_reattend_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_reattend_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_reattend_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_reattend_column" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_reattend_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_save_custom_column(store_id, execution_id, column_id, request, opts = {})
      importation_save_custom_column_with_http_info(store_id, execution_id, column_id, request, opts)
      return nil
    end

    # Create or replace a custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_save_custom_column_with_http_info(store_id, execution_id, column_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_save_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_save_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_save_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_save_custom_column" if column_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling CatalogsImportationCatalogInfoApi.importation_save_custom_column" if request.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_save_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_unmap_catalog_column(store_id, execution_id, column_id, opts = {})
      importation_unmap_catalog_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Unmap catalog column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The catalog column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_unmap_catalog_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_unmap_catalog_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_unmap_catalog_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_unmap_catalog_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_unmap_catalog_column" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_unmap_catalog_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmap custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def importation_unmap_custom_column(store_id, execution_id, column_id, opts = {})
      importation_unmap_custom_column_with_http_info(store_id, execution_id, column_id, opts)
      return nil
    end

    # Unmap custom column
    # 
    # @param store_id Your store identifier
    # @param execution_id The execution identifier of you catalog importation
    # @param column_id The custom column identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def importation_unmap_custom_column_with_http_info(store_id, execution_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CatalogsImportationCatalogInfoApi.importation_unmap_custom_column ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling CatalogsImportationCatalogInfoApi.importation_unmap_custom_column" if store_id.nil?
      # verify the required parameter 'execution_id' is set
      fail ArgumentError, "Missing the required parameter 'execution_id' when calling CatalogsImportationCatalogInfoApi.importation_unmap_custom_column" if execution_id.nil?
      # verify the required parameter 'column_id' is set
      fail ArgumentError, "Missing the required parameter 'column_id' when calling CatalogsImportationCatalogInfoApi.importation_unmap_custom_column" if column_id.nil?
      # resource path
      local_var_path = "/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'executionId' + '}', execution_id.to_s).sub('{' + 'columnId' + '}', column_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CatalogsImportationCatalogInfoApi#importation_unmap_custom_column\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
