=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class V2UserMarketplacesOrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
    # @return [nil]
    def change_order(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts = {})
      change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts)
      return nil
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.change_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling V2UserMarketplacesOrdersApi.change_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling V2UserMarketplacesOrdersApi.change_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling V2UserMarketplacesOrdersApi.change_order" if beez_up_order_id.nil?
      # verify the required parameter 'change_order_type' is set
      fail ArgumentError, "Missing the required parameter 'change_order_type' when calling V2UserMarketplacesOrdersApi.change_order" if change_order_type.nil?
      # verify the required parameter 'user_name' is set
      fail ArgumentError, "Missing the required parameter 'user_name' when calling V2UserMarketplacesOrdersApi.change_order" if user_name.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.change_order" if request.nil?
      # verify the required parameter 'if_match' is set
      fail ArgumentError, "Missing the required parameter 'if_match' when calling V2UserMarketplacesOrdersApi.change_order" if if_match.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s).sub('{' + 'changeOrderType' + '}', change_order_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'userName'] = user_name
      query_params[:'testMode'] = opts[:'test_mode'] if !opts[:'test_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#change_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
    # @return [BatchOrderOperationResponse]
    def change_order_list(change_order_type, user_name, request, opts = {})
      data, _status_code, _headers = change_order_list_with_http_info(change_order_type, user_name, request, opts)
      return data
    end

    # Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
    # @return [Array<(BatchOrderOperationResponse, Fixnum, Hash)>] BatchOrderOperationResponse data, response status code and response headers
    def change_order_list_with_http_info(change_order_type, user_name, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.change_order_list ..."
      end
      # verify the required parameter 'change_order_type' is set
      fail ArgumentError, "Missing the required parameter 'change_order_type' when calling V2UserMarketplacesOrdersApi.change_order_list" if change_order_type.nil?
      # verify the required parameter 'user_name' is set
      fail ArgumentError, "Missing the required parameter 'user_name' when calling V2UserMarketplacesOrdersApi.change_order_list" if user_name.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.change_order_list" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/batches/changeOrders/{changeOrderType}".sub('{format}','json').sub('{' + 'changeOrderType' + '}', change_order_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'userName'] = user_name
      query_params[:'testMode'] = opts[:'test_mode'] if !opts[:'test_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchOrderOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#change_order_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Clear an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.clear_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling V2UserMarketplacesOrdersApi.clear_merchant_order_info" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling V2UserMarketplacesOrdersApi.clear_merchant_order_info" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling V2UserMarketplacesOrdersApi.clear_merchant_order_info" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#clear_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a batch of operations to clear an Order's merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BatchOrderOperationResponse]
    def clear_merchant_order_info_list(request, opts = {})
      data, _status_code, _headers = clear_merchant_order_info_list_with_http_info(request, opts)
      return data
    end

    # Send a batch of operations to clear an Order&#39;s merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchOrderOperationResponse, Fixnum, Hash)>] BatchOrderOperationResponse data, response status code and response headers
    def clear_merchant_order_info_list_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.clear_merchant_order_info_list ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.clear_merchant_order_info_list" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/batches/clearMerchantOrderInfos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchOrderOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#clear_merchant_order_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Configure new or existing automatic Order status transition
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def configure_automatic_transitions(request, opts = {})
      configure_automatic_transitions_with_http_info(request, opts)
      return nil
    end

    # Configure new or existing automatic Order status transition
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def configure_automatic_transitions_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.configure_automatic_transitions ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.configure_automatic_transitions" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/automaticTransitions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#configure_automatic_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a new Order report exportation to be generated
    # A new file will be generated containing a summary of all the Orders matching the requested filter settings.
    # @param format The type of the file to export
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def export_orders(format, request, opts = {})
      export_orders_with_http_info(format, request, opts)
      return nil
    end

    # Request a new Order report exportation to be generated
    # A new file will be generated containing a summary of all the Orders matching the requested filter settings.
    # @param format The type of the file to export
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def export_orders_with_http_info(format, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.export_orders ..."
      end
      # verify the required parameter 'format' is set
      fail ArgumentError, "Missing the required parameter 'format' when calling V2UserMarketplacesOrdersApi.export_orders" if format.nil?
      # verify enum value
      unless ['csv'].include?(format)
        fail ArgumentError, "invalid value for 'format', must be one of csv"
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.export_orders" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/exportations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#export_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of configured automatic Order status transitions
    # 
    # @param [Hash] opts the optional parameters
    # @return [AutomaticTransitionInfos]
    def get_automatic_transitions(opts = {})
      data, _status_code, _headers = get_automatic_transitions_with_http_info(opts)
      return data
    end

    # Get list of configured automatic Order status transitions
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AutomaticTransitionInfos, Fixnum, Hash)>] AutomaticTransitionInfos data, response status code and response headers
    def get_automatic_transitions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_automatic_transitions ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/automaticTransitions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AutomaticTransitionInfos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_automatic_transitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get current synchronization status between your marketplaces and BeezUP accounts
    # 
    # @param [Hash] opts the optional parameters
    # @return [AccountSynchronizations]
    def get_marketplace_accounts_synchronization(opts = {})
      data, _status_code, _headers = get_marketplace_accounts_synchronization_with_http_info(opts)
      return data
    end

    # Get current synchronization status between your marketplaces and BeezUP accounts
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountSynchronizations, Fixnum, Hash)>] AccountSynchronizations data, response status code and response headers
    def get_marketplace_accounts_synchronization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_marketplace_accounts_synchronization ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/status".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountSynchronizations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_marketplace_accounts_synchronization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Order]
    def get_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling V2UserMarketplacesOrdersApi.get_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling V2UserMarketplacesOrdersApi.get_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling V2UserMarketplacesOrdersApi.get_order" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paginated list of Order report exportations
    # 
    # @param page_number The page number you want to get
    # @param page_size The count of Order report exportations you want to get
    # @param [Hash] opts the optional parameters
    # @return [OrderExportations]
    def get_order_exportations(page_number, page_size, opts = {})
      data, _status_code, _headers = get_order_exportations_with_http_info(page_number, page_size, opts)
      return data
    end

    # Get a paginated list of Order report exportations
    # 
    # @param page_number The page number you want to get
    # @param page_size The count of Order report exportations you want to get
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderExportations, Fixnum, Hash)>] OrderExportations data, response status code and response headers
    def get_order_exportations_with_http_info(page_number, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_order_exportations ..."
      end
      # verify the required parameter 'page_number' is set
      fail ArgumentError, "Missing the required parameter 'page_number' when calling V2UserMarketplacesOrdersApi.get_order_exportations" if page_number.nil?
      if page_number < 1
        fail ArgumentError, 'invalid value for "page_number" when calling V2UserMarketplacesOrdersApi.get_order_exportations, must be greater than or equal to 1.'
      end

      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling V2UserMarketplacesOrdersApi.get_order_exportations" if page_size.nil?
      if page_size > 100
        fail ArgumentError, 'invalid value for "page_size" when calling V2UserMarketplacesOrdersApi.get_order_exportations, must be smaller than or equal to 100.'
      end

      if page_size < 25
        fail ArgumentError, 'invalid value for "page_size" when calling V2UserMarketplacesOrdersApi.get_order_exportations, must be greater than or equal to 25.'
      end

      # resource path
      local_var_path = "/v2/user/marketplaces/orders/exportations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = page_number
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderExportations')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_order_exportations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Order's harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [OrderHistory]
    def get_order_history(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get an Order&#39;s harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderHistory, Fixnum, Hash)>] OrderHistory data, response status code and response headers
    def get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_order_history ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling V2UserMarketplacesOrdersApi.get_order_history" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling V2UserMarketplacesOrdersApi.get_order_history" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling V2UserMarketplacesOrdersApi.get_order_history" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_order_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paginated list of all Orders with all Order and Order Item(s) properties
    # The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
    # @param accept_encoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [OrderListFull]
    def get_order_list_full(accept_encoding, opts = {})
      data, _status_code, _headers = get_order_list_full_with_http_info(accept_encoding, opts)
      return data
    end

    # Get a paginated list of all Orders with all Order and Order Item(s) properties
    # The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
    # @param accept_encoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [Array<(OrderListFull, Fixnum, Hash)>] OrderListFull data, response status code and response headers
    def get_order_list_full_with_http_info(accept_encoding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_order_list_full ..."
      end
      # verify the required parameter 'accept_encoding' is set
      fail ArgumentError, "Missing the required parameter 'accept_encoding' when calling V2UserMarketplacesOrdersApi.get_order_list_full" if accept_encoding.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/list/full".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Accept-Encoding'] = @api_client.build_collection_param(accept_encoding, :csv)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderListFull')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_order_list_full\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paginated list of all Orders without details
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [OrderListLight]
    def get_order_list_light(opts = {})
      data, _status_code, _headers = get_order_list_light_with_http_info(opts)
      return data
    end

    # Get a paginated list of all Orders without details
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [OrderListRequest] :request 
    # @return [Array<(OrderListLight, Fixnum, Hash)>] OrderListLight data, response status code and response headers
    def get_order_list_light_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.get_order_list_light ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/list/light".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'request'])
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderListLight')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#get_order_list_light\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request to all your marketplaces
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_all(opts = {})
      harvest_all_with_http_info(opts)
      return nil
    end

    # Send harvest request to all your marketplaces
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.harvest_all ..."
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/harvest".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#harvest_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.harvest_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling V2UserMarketplacesOrdersApi.harvest_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling V2UserMarketplacesOrdersApi.harvest_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling V2UserMarketplacesOrdersApi.harvest_order" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#harvest_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts)
      return nil
    end

    # Set an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.set_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling V2UserMarketplacesOrdersApi.set_merchant_order_info" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling V2UserMarketplacesOrdersApi.set_merchant_order_info" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling V2UserMarketplacesOrdersApi.set_merchant_order_info" if beez_up_order_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.set_merchant_order_info" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#set_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a batch of operations to set an Order's merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [BatchOrderOperationResponse]
    def set_merchant_order_info_list(request, opts = {})
      data, _status_code, _headers = set_merchant_order_info_list_with_http_info(request, opts)
      return data
    end

    # Send a batch of operations to set an Order&#39;s merchant information
    # The purpose of this operation is to reduce the amount of request to the API.
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchOrderOperationResponse, Fixnum, Hash)>] BatchOrderOperationResponse data, response status code and response headers
    def set_merchant_order_info_list_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: V2UserMarketplacesOrdersApi.set_merchant_order_info_list ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling V2UserMarketplacesOrdersApi.set_merchant_order_info_list" if request.nil?
      # resource path
      local_var_path = "/v2/user/marketplaces/orders/batches/setMerchantOrderInfos".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchOrderOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2UserMarketplacesOrdersApi#set_merchant_order_info_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
