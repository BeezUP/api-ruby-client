=begin
#BeezUP API

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class AnalyticsRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Rule creation
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_rule(store_id, request, opts = {})
      create_rule_with_http_info(store_id, request, opts)
      return nil
    end

    # Rule creation
    # 
    # @param store_id Your store identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_rule_with_http_info(store_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.create_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.create_rule" if store_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling AnalyticsRulesApi.create_rule" if request.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#create_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rule(store_id, rule_id, opts = {})
      delete_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Delete Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.delete_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.delete_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.delete_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def disable_rule(store_id, rule_id, opts = {})
      disable_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Disable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def disable_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.disable_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.disable_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.disable_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}/disable".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#disable_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_rule(store_id, rule_id, opts = {})
      enable_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Enable rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.enable_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.enable_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.enable_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}/enable".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#enable_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_rule(store_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(store_id, rule_id, opts)
      return data
    end

    # Gets the rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Fixnum, Hash)>] Rule data, response status code and response headers
    def get_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.get_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.get_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.get_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Rule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the list of rules for a given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [RuleList]
    def get_rules(store_id, opts = {})
      data, _status_code, _headers = get_rules_with_http_info(store_id, opts)
      return data
    end

    # Gets the list of rules for a given store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleList, Fixnum, Hash)>] RuleList data, response status code and response headers
    def get_rules_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.get_rules ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.get_rules" if store_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the rules execution history
    # 
    # @param store_id Your store identifier
    # @param page_number The page to retrieve
    # @param page_size The count of rule history to retrieve
    # @param [Hash] opts the optional parameters
    # @return [RuleExecutionReportings]
    def get_rules_executions(store_id, page_number, page_size, opts = {})
      data, _status_code, _headers = get_rules_executions_with_http_info(store_id, page_number, page_size, opts)
      return data
    end

    # Get the rules execution history
    # 
    # @param store_id Your store identifier
    # @param page_number The page to retrieve
    # @param page_size The count of rule history to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleExecutionReportings, Fixnum, Hash)>] RuleExecutionReportings data, response status code and response headers
    def get_rules_executions_with_http_info(store_id, page_number, page_size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.get_rules_executions ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.get_rules_executions" if store_id.nil?
      # verify the required parameter 'page_number' is set
      fail ArgumentError, "Missing the required parameter 'page_number' when calling AnalyticsRulesApi.get_rules_executions" if page_number.nil?
      if page_number < 1
        fail ArgumentError, 'invalid value for "page_number" when calling AnalyticsRulesApi.get_rules_executions, must be greater than or equal to 1.'
      end

      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling AnalyticsRulesApi.get_rules_executions" if page_size.nil?
      if page_size > 100
        fail ArgumentError, 'invalid value for "page_size" when calling AnalyticsRulesApi.get_rules_executions, must be smaller than or equal to 100.'
      end

      if page_size < 10
        fail ArgumentError, 'invalid value for "page_size" when calling AnalyticsRulesApi.get_rules_executions, must be greater than or equal to 10.'
      end

      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/executions".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageNumber'] = page_number
      query_params[:'pageSize'] = page_size

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RuleExecutionReportings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#get_rules_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the rule down
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_down_rule(store_id, rule_id, opts = {})
      move_down_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Move the rule down
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_down_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.move_down_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.move_down_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.move_down_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}/movedown".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#move_down_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move the rule up
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def move_up_rule(store_id, rule_id, opts = {})
      move_up_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Move the rule up
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_up_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.move_up_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.move_up_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.move_up_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}/moveup".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#move_up_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_rule(store_id, rule_id, opts = {})
      run_rule_with_http_info(store_id, rule_id, opts)
      return nil
    end

    # Run rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_rule_with_http_info(store_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.run_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.run_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.run_rule" if rule_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}/run".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#run_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run all rules for this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def run_rules(store_id, opts = {})
      run_rules_with_http_info(store_id, opts)
      return nil
    end

    # Run all rules for this store
    # 
    # @param store_id Your store identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def run_rules_with_http_info(store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.run_rules ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.run_rules" if store_id.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/run".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#run_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_rule(store_id, rule_id, request, opts = {})
      update_rule_with_http_info(store_id, rule_id, request, opts)
      return nil
    end

    # Update Rule
    # 
    # @param store_id Your store identifier
    # @param rule_id Your rule identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_rule_with_http_info(store_id, rule_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AnalyticsRulesApi.update_rule ..."
      end
      # verify the required parameter 'store_id' is set
      fail ArgumentError, "Missing the required parameter 'store_id' when calling AnalyticsRulesApi.update_rule" if store_id.nil?
      # verify the required parameter 'rule_id' is set
      fail ArgumentError, "Missing the required parameter 'rule_id' when calling AnalyticsRulesApi.update_rule" if rule_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling AnalyticsRulesApi.update_rule" if request.nil?
      # resource path
      local_var_path = "/user/analytics/{storeId}/rules/{ruleId}".sub('{format}','json').sub('{' + 'storeId' + '}', store_id.to_s).sub('{' + 'ruleId' + '}', rule_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsRulesApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
