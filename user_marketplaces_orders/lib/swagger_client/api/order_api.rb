=begin
#Marketplaces - Orders

#The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (default to false)
    # @return [nil]
    def change_order(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts = {})
      change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts)
      return nil
    end

    # Change your marketplace Order Information (accept, ship, etc.)
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param change_order_type The Order change type
    # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
    # @param request 
    # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def change_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, change_order_type, user_name, request, if_match, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.change_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling OrderApi.change_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.change_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling OrderApi.change_order" if beez_up_order_id.nil?
      # verify the required parameter 'change_order_type' is set
      fail ArgumentError, "Missing the required parameter 'change_order_type' when calling OrderApi.change_order" if change_order_type.nil?
      # verify the required parameter 'user_name' is set
      fail ArgumentError, "Missing the required parameter 'user_name' when calling OrderApi.change_order" if user_name.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling OrderApi.change_order" if request.nil?
      # verify the required parameter 'if_match' is set
      fail ArgumentError, "Missing the required parameter 'if_match' when calling OrderApi.change_order" if if_match.nil?
      # resource path
      local_var_path = "/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s).sub('{' + 'changeOrderType' + '}', change_order_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'userName'] = user_name
      query_params[:'testMode'] = opts[:'test_mode'] if !opts[:'test_mode'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-Match'] = if_match

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#change_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Clear an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clear_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.clear_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling OrderApi.clear_merchant_order_info" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.clear_merchant_order_info" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling OrderApi.clear_merchant_order_info" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#clear_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Order]
    def get_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get full Order and Order Item(s) properties
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def get_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.get_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling OrderApi.get_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.get_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling OrderApi.get_order" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'If-None-Match'] = opts[:'if_none_match'] if !opts[:'if_none_match'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Order's harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [OrderHistory]
    def get_order_history(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      data, _status_code, _headers = get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return data
    end

    # Get an Order&#39;s harvest and change history
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderHistory, Fixnum, Hash)>] OrderHistory data, response status code and response headers
    def get_order_history_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.get_order_history ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling OrderApi.get_order_history" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.get_order_history" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling OrderApi.get_order_history" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderHistory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def harvest_order(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts)
      return nil
    end

    # Send harvest request for a single Order
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def harvest_order_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.harvest_order ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling OrderApi.harvest_order" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.harvest_order" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling OrderApi.harvest_order" if beez_up_order_id.nil?
      # resource path
      local_var_path = "/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#harvest_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an Order's merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_merchant_order_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts)
      return nil
    end

    # Set an Order&#39;s merchant information
    # 
    # @param marketplace_technical_code The marketplace technical code
    # @param account_id The account identifier
    # @param beez_up_order_id The BeezUP Order identifier
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_merchant_order_info_with_http_info(marketplace_technical_code, account_id, beez_up_order_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrderApi.set_merchant_order_info ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling OrderApi.set_merchant_order_info" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.set_merchant_order_info" if account_id.nil?
      # verify the required parameter 'beez_up_order_id' is set
      fail ArgumentError, "Missing the required parameter 'beez_up_order_id' when calling OrderApi.set_merchant_order_info" if beez_up_order_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling OrderApi.set_merchant_order_info" if request.nil?
      # resource path
      local_var_path = "/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'beezUPOrderId' + '}', beez_up_order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#set_merchant_order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
