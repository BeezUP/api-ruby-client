=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::V2UserCustomerApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'V2UserCustomerApi' do
  before do
    # run before each test
    @instance = SwaggerClient::V2UserCustomerApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of V2UserCustomerApi' do
    it 'should create an instact of V2UserCustomerApi' do
      expect(@instance).to be_instance_of(SwaggerClient::V2UserCustomerApi)
    end
  end

  # unit tests for activate_user_account
  # Activate the user account
  # 
  # @param email_activation_id The email activation id received by email.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'activate_user_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_password
  # Change user password
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'change_password test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contract
  # Create a new contract
  # Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BeezUPCommonInfoSummaries]
  describe 'create_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_store
  # Create a new store
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [LinksGetStoresLink]
  describe 'create_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_next_contract
  # Delete your next contract
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_next_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_share
  # Delete a share to another user
  # 
  # @param store_id Your store identifier
  # @param user_id The friend user id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_share test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_store
  # Delete a store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_billing_periods
  # Get billing periods conditions
  # 
  # @param [Hash] opts the optional parameters
  # @return [BillingPeriods]
  describe 'get_billing_periods test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contracts
  # Get contract list
  # 
  # @param [Hash] opts the optional parameters
  # @return [Contracts]
  describe 'get_contracts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_card_info
  # Get credit card information
  # 
  # @param [Hash] opts the optional parameters
  # @return [CreditCardInfoResponse]
  describe 'get_credit_card_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_friend_info
  # Get friend information
  # 
  # @param user_id Your friend user id
  # @param [Hash] opts the optional parameters
  # @return [UserFriendInfo]
  describe 'get_friend_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoices
  # Get all your invoices
  # 
  # @param [Hash] opts the optional parameters
  # @return [Invoices]
  describe 'get_invoices test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_offer
  # Get offer pricing
  # Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Offer]
  describe 'get_offer test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rights
  # Get store&#39;s rights
  # 
  # @param store_id Your store identifier
  # @param functionality_code_list The functionality code list you want to check
  # @param [Hash] opts the optional parameters
  # @return [Array<FunctionalityRightInfo>]
  describe 'get_rights test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_shares
  # Get shares related to this store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreShares]
  describe 'get_shares test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_standard_offers
  # Get all standard offers
  # 
  # @param [Hash] opts the optional parameters
  # @return [StandardOffers]
  describe 'get_standard_offers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store
  # Get store&#39;s information
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreHeader]
  describe 'get_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_alerts
  # Get store&#39;s alerts
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreAlerts]
  describe 'get_store_alerts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_stores
  # Get store list
  # 
  # @param [Hash] opts the optional parameters
  # @return [Stores]
  describe 'get_stores test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_account_info
  # Get user account information
  # 
  # @param [Hash] opts the optional parameters
  # @return [AccountInfo]
  describe 'get_user_account_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logout
  # Log out the current user from go2
  # Log out the current user from go2
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'logout test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactivate_current_contract
  # Reactivate your terminated contract.
  # By calling this operation you can re-enable the auto renewal.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reactivate_current_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for resend_email_activation
  # Resend email activation
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'resend_email_activation test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_company_info
  # Change company information
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_company_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_credit_card_info
  # Save user credit card info
  # 
  # @param request Credit card info
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_credit_card_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_personal_info
  # Save user personal information
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_personal_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_profile_picture_info
  # Change user picture information
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_profile_picture_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_store_alert
  # Save store alert
  # 
  # @param store_id Your store identifier
  # @param alert_id 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_store_alert test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for share
  # Share a store to another user
  # 
  # @param store_id Your store identifier
  # @param email Your friend&#39;s email
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'share test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for terminate_current_contract
  # Schedule termination of your current contract at the end of the commitment.
  # By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
  # @param request Indicate the termination reason
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'terminate_current_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_store
  # Update some store&#39;s information.
  # Update some store&#39;s information. FYI, you cannot change the country. 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
