=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::V2UserAnalyticsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'V2UserAnalyticsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::V2UserAnalyticsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of V2UserAnalyticsApi' do
    it 'should create an instact of V2UserAnalyticsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::V2UserAnalyticsApi)
    end
  end

  # unit tests for create_rule
  # Rule creation
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_report_filter
  # Delete the report filter
  # 
  # @param store_id Your store identifier
  # @param report_filter_id Your report filter identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_report_filter test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_rule
  # Delete Rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_rule
  # Disable rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_rule
  # Enable rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'enable_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_store_report_by_category
  # Export the report by category
  # Export the report by category
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'export_store_report_by_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_store_report_by_channel
  # Export the report by channel
  # Export the report by channel
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'export_store_report_by_channel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_store_report_by_product
  # Export the report by product
  # Export the report by product
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'export_store_report_by_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_filter
  # Get the report filter description
  # 
  # @param store_id Your store identifier
  # @param report_filter_id Your report filter identifier
  # @param [Hash] opts the optional parameters
  # @return [ReportFilter]
  describe 'get_report_filter test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_filters
  # Get report filter list for the given store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [ReportFilters]
  describe 'get_report_filters test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rule
  # Gets the rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [Rule]
  describe 'get_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules
  # Gets the list of rules for a given store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [Rules]
  describe 'get_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules_executions
  # Get the rules execution history
  # 
  # @param store_id Your store identifier
  # @param page_number The page to retrieve
  # @param page_size The count of rule history to retrieve
  # @param [Hash] opts the optional parameters
  # @return [RuleExecutionReportings]
  describe 'get_rules_executions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_category
  # Get the report by category
  # Get the report by category
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByCategoryResponse]
  describe 'get_store_report_by_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_channel
  # Get the report by channel
  # Get the report by channel
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByChannelResponse]
  describe 'get_store_report_by_channel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_day
  # Get the report by day
  # Get the report by day
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByDayResponse]
  describe 'get_store_report_by_day test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_day_export
  # Get the report by day
  # Get the report by day
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'get_store_report_by_day_export test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_product
  # Get the report by product
  # Get the report by product
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByProductResponse]
  describe 'get_store_report_by_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_clicks
  # Get the latest clicks tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The click&#39;s count you want to get
  # @return [TrackedClicks]
  describe 'get_store_tracked_clicks test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_external_orders
  # Get the latest external orders tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The external order&#39;s count you want to get
  # @return [TrackedExternalOrders]
  describe 'get_store_tracked_external_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_orders
  # Get the latest orders tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The order&#39;s count you want to get
  # @return [TrackedOrders]
  describe 'get_store_tracked_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracking_status
  # Get store tracking synchronization status
  # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreTrackingStatus]
  describe 'get_store_tracking_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_status
  # Display the synchronization status of the clicks and orders
  # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
  # @param [Hash] opts the optional parameters
  # @return [TrackingStatus]
  describe 'get_tracking_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_down_rule
  # Move the rule down
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'move_down_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_up_rule
  # Move the rule up
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'move_up_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise
  # Optimise products
  # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
  # @param store_id Your store identifier
  # @param action_name 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'optimise test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise_by_category
  # Optimise products&#39;s category
  # /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
  # @param store_id Your store identifier
  # @param catalog_category_id The category identifier concerned by this optimisation
  # @param action_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
  # @return [nil]
  describe 'optimise_by_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise_by_channel
  # Optimise products&#39;s category
  # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
  # @param store_id Your store identifier
  # @param channel_id The channel identifier concerned by this optimisation
  # @param action_name 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'optimise_by_channel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise_by_product
  # Optimise products
  # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
  # @param store_id Your store identifier
  # @param product_id The product identifier concerned by this optimisation
  # @param action_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
  # @return [nil]
  describe 'optimise_by_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_rule
  # Run rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'run_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_rules
  # Run all rules for this store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'run_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_report_filter
  # Save the report filter
  # 
  # @param store_id Your store identifier
  # @param report_filter_id Your report filter identifier
  # @param report_filter 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_report_filter test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_rule
  # Update Rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
