=begin
#BeezUP API

## The REST API of BeezUP system ## Overview The REST APIs provide programmatic access to read and write BeezUP data.  Basically, with this API you will be able to do everything like you were with your browser on https://go.beezup.com !  The main features are: - Register and manage your account - Create and manage and share your stores with your friends/co-workers. - Import your product catalog and schedule the auto importation - Search the channels your want to use - Configure your channels for your catalogs to export your product information:     - cost and general settings     - category and columns mappings     - your will be able to create and manage your custom column     - put in place exlusion filters based on simple conditions on your product data     - override product values     - get product vision for a channel catalog scope - Analyze and optimize your performance of your catalogs on all yours channels with different type of reportings by day, channel, category and by product. - Automatize your optimisation by using rules! - And of course... Manage your orders harvested from all your marketplaces:     - Synchronize your orders in an uniformized way     - Get the available actions and update the order status - ...and more!  ## Authentication credentials The public API with the base path **/v2/public** have been put in place to give you an entry point to our system for the user registration, login and lost password. The public API does not require any credentials. We give you the some public list of values and public channels for our public commercial web site [www.beezup.com](http://www.beezup.com).  The user API with the base path **/v2/user** requires a token which is available on this page: https://go.beezup.com/Account/MyAccount  ## Things to keep in mind ### API Rate Limits - The BeezUP REST API is limited to 100 calls/minute.  ### Media type The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.  ### Required content type The required and default encoding for the request and responses is UTF8.  ### Required date time format All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.  ### Base URL The Base URL of the BeezUP API Order Management REST API conforms to the following template.  https://api.beezup.com  All URLs returned by the BeezUP API are relative to this base URL, and all requests to the REST API must use this base URL template.  You can test our API on https://api-docs.beezup.com/swagger-ui\\ You can contact us on [gitter, #BeezUP/API](https://gitter.im/beezUP/API) 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::AnalyticsTrackingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AnalyticsTrackingApi' do
  before do
    # run before each test
    @instance = SwaggerClient::AnalyticsTrackingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AnalyticsTrackingApi' do
    it 'should create an instact of AnalyticsTrackingApi' do
      expect(@instance).to be_instance_of(SwaggerClient::AnalyticsTrackingApi)
    end
  end

  # unit tests for get_store_tracked_clicks
  # Get the latest clicks tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The click&#39;s count you want to get
  # @return [TrackedClicks]
  describe 'get_store_tracked_clicks test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_external_orders
  # Get the latest external orders tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The external order&#39;s count you want to get
  # @return [TrackedExternalOrders]
  describe 'get_store_tracked_external_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_orders
  # Get the latest orders tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The order&#39;s count you want to get
  # @return [TrackedOrders]
  describe 'get_store_tracked_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracking_status
  # Get store tracking synchronization status
  # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreTrackingStatus]
  describe 'get_store_tracking_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_status
  # Display the synchronization status of the clicks and orders
  # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
  # @param [Hash] opts the optional parameters
  # @return [TrackingStatus]
  describe 'get_tracking_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
