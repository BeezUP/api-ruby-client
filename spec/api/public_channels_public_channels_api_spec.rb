=begin
#BeezUP API

#This API will allow you to create your account and to get your tokens. \\ If you lost your password, you have an operation to get it back. 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::PublicChannelsPublicChannelsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PublicChannelsPublicChannelsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::PublicChannelsPublicChannelsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PublicChannelsPublicChannelsApi' do
    it 'should create an instact of PublicChannelsPublicChannelsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::PublicChannelsPublicChannelsApi)
    end
  end

  # unit tests for get_channels
  # The channel list for one country
  # 
  # @param country_iso_code The country iso code alpha 3 based on this: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Decoding_table \\ To know which country are available you have to use the operation: GetChannelsByCountry 
  # @param accept_encoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size.
  # @param [Hash] opts the optional parameters
  # @return [ChannelInfoList]
  describe 'get_channels test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channels_index
  # Get public channel index
  # Use this operation to get the correct link to the channels and to the list of values
  # @param [Hash] opts the optional parameters
  # @return [PublicChannelIndex]
  describe 'get_channels_index test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
