=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::BeezUPApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BeezUPApi' do
  before do
    # run before each test
    @instance = SwaggerClient::BeezUPApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BeezUPApi' do
    it 'should create an instact of BeezUPApi' do
      expect(@instance).to be_instance_of(SwaggerClient::BeezUPApi)
    end
  end

  # unit tests for activate_user_account
  # Activate the user account
  # 
  # @param email_activation_id The email activation id received by email.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'activate_user_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_configure_auto_import_interval
  # Configure Auto Import Interval
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auto_configure_auto_import_interval test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_delete_auto_import
  # Delete Auto Import
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auto_delete_auto_import test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_get_auto_import_configuration
  # Get the auto import configuration
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [AutoImportConfiguration]
  describe 'auto_get_auto_import_configuration test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_pause_auto_import
  # Pause Auto Import
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auto_pause_auto_import test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_resume_auto_import
  # Resume Auto Import
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auto_resume_auto_import test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_schedule_auto_import
  # Configure Auto Import Schedules
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auto_schedule_auto_import test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auto_start_auto_import
  # Start Auto Import Manually
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'auto_start_auto_import test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_change_catalog_column_user_name
  # Change Catalog Column User Name
  # 
  # @param store_id Your store identifier
  # @param column_id The catalog column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_change_catalog_column_user_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_change_custom_column_expression
  # Change custom column expression
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_change_custom_column_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_change_custom_column_user_name
  # Change Custom Column User Name
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_change_custom_column_user_name test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_compute_expression
  # Compute the expression for this catalog.
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'catalog_compute_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_delete_custom_column
  # Delete custom column
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_delete_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_beez_up_columns
  # Get the BeezUP columns
  # Get the BeezUP columns, this columns are used for mapping during the manual catalog importation process.
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPColumnConfiguration>]
  describe 'catalog_get_beez_up_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_catalog_columns
  # Get catalog column list
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [CatalogColumns]
  describe 'catalog_get_catalog_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_categories
  # Get category list
  # 
  # @param store_id Your store identifier
  # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
  # @param [Hash] opts the optional parameters
  # @return [Categories]
  describe 'catalog_get_categories test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_custom_column_expression
  # Get the encrypted custom column expression
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'catalog_get_custom_column_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_custom_columns
  # Get custom column list
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [CustomColumns]
  describe 'catalog_get_custom_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_product
  # Get product
  # 
  # @param store_id Your store identifier
  # @param product_id The product identifier you want to get
  # @param [Hash] opts the optional parameters
  # @return [Product]
  describe 'catalog_get_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_products
  # Get product list
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [GetProductsRequest] :request 
  # @return [Products]
  describe 'catalog_get_products test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_get_random_products
  # Get random product list
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The count of random product you want to get
  # @return [Products]
  describe 'catalog_get_random_products test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for catalog_save_custom_column
  # Create or replace a custom column
  # 
  # @param store_id Your store identifier
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'catalog_save_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_order
  # Change your marketplace Order Information (accept, ship, etc.)
  # 
  # @param marketplace_technical_code The marketplace technical code
  # @param account_id The account identifier
  # @param beez_up_order_id The BeezUP Order identifier
  # @param change_order_type The Order change type
  # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
  # @param request 
  # @param if_match ETag value to identify the last known version of requested Order, to ensure that you are making a change on the lastest version of the order.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
  # @return [nil]
  describe 'change_order test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_order_list
  # Send a batch of operations to change your marketplace Order information (accept, ship, etc.)
  # The purpose of this operation is to reduce the amount of request to the API.
  # @param change_order_type The Order change type
  # @param user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login.
  # @param request 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account.
  # @return [BatchOrderOperationResponse]
  describe 'change_order_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for change_password
  # Change user password
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'change_password test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_merchant_order_info
  # Clear an Order&#39;s merchant information
  # 
  # @param marketplace_technical_code The marketplace technical code
  # @param account_id The account identifier
  # @param beez_up_order_id The BeezUP Order identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'clear_merchant_order_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for clear_merchant_order_info_list
  # Send a batch of operations to clear an Order&#39;s merchant information
  # The purpose of this operation is to reduce the amount of request to the API.
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BatchOrderOperationResponse]
  describe 'clear_merchant_order_info_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for configure_automatic_transitions
  # Configure new or existing automatic Order status transition
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'configure_automatic_transitions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for configure_channel_catalog_cost_settings
  # Disable a channel catalog
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'configure_channel_catalog_cost_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for configure_channel_catalog_exclusion_filters
  # Configure channel catalog exclusion filters
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'configure_channel_catalog_exclusion_filters test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for configure_channel_catalog_general_settings
  # Disable a channel catalog
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'configure_channel_catalog_general_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_channel_catalog
  # Create a new channel catalog
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'create_channel_catalog test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contract
  # Create a new contract
  # Now you are ready to create your contract. Before that, please ensure that you check the offer with the same request parameterts. /offers 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BeezUPCommonInfoSummaries]
  describe 'create_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_rule
  # Rule creation
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'create_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_store
  # Create a new store
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [LinksGetStoresLink]
  describe 'create_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_channel_catalog
  # Delete the channel catalog
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_channel_catalog test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_channel_catalog_product_value_override
  # Delete a specific channel catalog product value override
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param product_id The product identifier
  # @param channel_column_id The channel column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_channel_catalog_product_value_override test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_next_contract
  # Delete your next contract
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_next_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_report_filter
  # Delete the report filter
  # 
  # @param store_id Your store identifier
  # @param report_filter_id Your report filter identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_report_filter test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_rule
  # Delete Rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_share
  # Delete a share to another user
  # 
  # @param store_id Your store identifier
  # @param user_id The friend user id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_share test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_store
  # Delete a store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_channel_catalog
  # Disable a channel catalog
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_channel_catalog test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_channel_catalog_product
  # Disable channel catalog product
  # By default a all your catalog products are exposed to the channel. You can disable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
  # @param channel_catalog_id The channel catalog identifier
  # @param product_id The product identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_channel_catalog_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for disable_rule
  # Disable rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'disable_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_channel_catalog
  # Enable a channel catalog
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'enable_channel_catalog test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for enable_rule
  # Enable rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'enable_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_orders
  # Request a new Order report exportation to be generated
  # A new file will be generated containing a summary of all the Orders matching the requested filter settings.
  # @param format The type of the file to export
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'export_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_store_report_by_category
  # Export the report by category
  # Export the report by category
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BeezUPCommonLink3]
  describe 'export_store_report_by_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_store_report_by_channel
  # Export the report by channel
  # Export the report by channel
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BeezUPCommonLink3]
  describe 'export_store_report_by_channel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_store_report_by_product
  # Export the report by product
  # Export the report by product
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BeezUPCommonLink3]
  describe 'export_store_report_by_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_automatic_transitions
  # Get list of configured automatic Order status transitions
  # 
  # @param [Hash] opts the optional parameters
  # @return [AutomaticTransitionInfos]
  describe 'get_automatic_transitions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_channels
  # List all available channel for this store
  # 
  # @param store_id The store identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<ChannelHeader>]
  describe 'get_available_channels test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_billing_periods
  # Get billing periods conditions
  # 
  # @param [Hash] opts the optional parameters
  # @return [BillingPeriods]
  describe 'get_billing_periods test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog
  # Get the channel catalog information
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param [Hash] opts the optional parameters
  # @return [ChannelCatalog]
  describe 'get_channel_catalog test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog_categories
  # Get channel catalog categories
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param [Hash] opts the optional parameters
  # @return [ChannelCatalogCategoryMappings]
  describe 'get_channel_catalog_categories test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog_exclusion_filter_operators
  # Get channel catalog exclusion filter operators
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<ExclusionFilterOperator>]
  describe 'get_channel_catalog_exclusion_filter_operators test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog_marketplace_properties
  # Get the marketplace properties for a channel catalog
  # 
  # @param channel_catalog_id 
  # @param [Hash] opts the optional parameters
  # @return [ChannelCatalogMarketplaceProperties]
  describe 'get_channel_catalog_marketplace_properties test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog_marketplace_settings
  # Get the marketplace settings for a channel catalog
  # 
  # @param channel_catalog_id Channel Catalog Id to query (required)
  # @param [Hash] opts the optional parameters
  # @return [ChannelCatalogMarketplaceSettings]
  describe 'get_channel_catalog_marketplace_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog_product_info
  # Get channel catalog product information
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param product_id The product identifier
  # @param [Hash] opts the optional parameters
  # @return [ChannelCatalogProductInfo]
  describe 'get_channel_catalog_product_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalog_product_info_list
  # Get channel catalog product information list
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param [Hash] opts the optional parameters
  # @option opts [GetChannelCatalogProductInfoListRequest] :request The channel catalog product list filter
  # @return [ChannelCatalogProductInfoList]
  describe 'get_channel_catalog_product_info_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_catalogs
  # List all your current channel catalogs
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id The store identifier
  # @return [ChannelCatalogList]
  describe 'get_channel_catalogs test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_categories
  # Get channel categories
  # 
  # @param channel_id The channel identifier
  # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
  # @param [Hash] opts the optional parameters
  # @return [ChannelRootCategory]
  describe 'get_channel_categories test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_columns
  # Get channel columns
  # 
  # @param channel_id The channel identifier
  # @param accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<BeezUPCommonChannelColumnId>] :request Allow you to filter the channel column identifier list your want to get
  # @return [Array<ChannelColumn>]
  describe 'get_channel_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_channel_info
  # Get channel information
  # 
  # @param channel_id The channel identifier
  # @param [Hash] opts the optional parameters
  # @return [ChannelInfo]
  describe 'get_channel_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contracts
  # Get contract list
  # 
  # @param [Hash] opts the optional parameters
  # @return [Contracts]
  describe 'get_contracts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_card_info
  # Get credit card information
  # 
  # @param [Hash] opts the optional parameters
  # @return [CreditCardInfoResponse]
  describe 'get_credit_card_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_friend_info
  # Get friend information
  # 
  # @param user_id Your friend user id
  # @param [Hash] opts the optional parameters
  # @return [UserFriendInfo]
  describe 'get_friend_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoices
  # Get all your invoices
  # 
  # @param [Hash] opts the optional parameters
  # @return [Invoices]
  describe 'get_invoices test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_marketplace_account_stores
  # Get  you marketplace channel catalog list
  # 
  # @param [Hash] opts the optional parameters
  # @return [MarketplaceChannelCatalogList]
  describe 'get_marketplace_account_stores test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_marketplace_accounts_synchronization
  # Get current synchronization status between your marketplaces and BeezUP accounts
  # 
  # @param [Hash] opts the optional parameters
  # @return [AccountSynchronizations]
  describe 'get_marketplace_accounts_synchronization test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_offer
  # Get offer pricing
  # Get the offer pricing then you can create your contract with the same request parameters. /v2/user/customer/contracts 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Offer]
  describe 'get_offer test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order
  # Get full Order and Order Item(s) properties
  # 
  # @param marketplace_technical_code The marketplace technical code
  # @param account_id The account identifier
  # @param beez_up_order_id The BeezUP Order identifier
  # @param [Hash] opts the optional parameters
  # @option opts [String] :if_none_match ETag value to identify the last known version of requested Order\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 
  # @return [Order]
  describe 'get_order test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_exportations
  # Get a paginated list of Order report exportations
  # 
  # @param page_number The page number you want to get
  # @param page_size The count of Order report exportations you want to get
  # @param store_id The store identifier to regroup the order exportations
  # @param [Hash] opts the optional parameters
  # @return [OrderExportations]
  describe 'get_order_exportations test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_history
  # Get an Order&#39;s harvest and change history
  # 
  # @param marketplace_technical_code The marketplace technical code
  # @param account_id The account identifier
  # @param beez_up_order_id The BeezUP Order identifier
  # @param [Hash] opts the optional parameters
  # @return [OrderHistory]
  describe 'get_order_history test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_list_full
  # Get a paginated list of all Orders with all Order and Order Item(s) properties
  # The purpose of this operation is to reduce the amount of request to the API.\\ \\ Previous implmentation of this feature only returned a partial (light) version of the Orders. The purpose of this API is to reduce the number of incoming requests by returning the complete (full) Order and Order Item(s) properties. 
  # @param accept_encoding Allows the client to indicate wether it accepts a compressed encoding to reduce traffic size
  # @param [Hash] opts the optional parameters
  # @option opts [OrderListRequest] :request 
  # @return [OrderListFull]
  describe 'get_order_list_full test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_list_light
  # Get a paginated list of all Orders without details
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [OrderListRequest] :request 
  # @return [OrderListLight]
  describe 'get_order_list_light test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_profile_picture_info
  # Get profile picture information
  # 
  # @param [Hash] opts the optional parameters
  # @return [ProfilePictureInfoResponse]
  describe 'get_profile_picture_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_publications
  # Fetch the publication history for an account, sorted by descending start date
  # 
  # @param marketplace_technical_code Marketplace Technical Code to query (required)
  # @param account_id Account Id to query (required)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :channel_catalog_id Channel Catalog Id by which to filter (optional)
  # @option opts [Integer] :count Amount of entries to fetch (optional, default set to 10)
  # @option opts [Array<String>] :publication_types Publication types by which to filter (optional)
  # @return [AccountPublications]
  describe 'get_publications test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_filter
  # Get the report filter description
  # 
  # @param store_id Your store identifier
  # @param report_filter_id Your report filter identifier
  # @param [Hash] opts the optional parameters
  # @return [ReportFilter]
  describe 'get_report_filter test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_filters
  # Get report filter list for the given store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [ReportFilters]
  describe 'get_report_filters test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rights
  # Get store&#39;s rights
  # 
  # @param store_id Your store identifier
  # @param functionality_code_list The functionality code list you want to check
  # @param [Hash] opts the optional parameters
  # @return [Array<FunctionalityRightInfo>]
  describe 'get_rights test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rule
  # Gets the rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [Rule]
  describe 'get_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules
  # Gets the list of rules for a given store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [RuleList]
  describe 'get_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rules_executions
  # Get the rules execution history
  # 
  # @param store_id Your store identifier
  # @param page_number The page to retrieve
  # @param page_size The count of rule history to retrieve
  # @param [Hash] opts the optional parameters
  # @return [RuleExecutionReportings]
  describe 'get_rules_executions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_shares
  # Get shares related to this store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreShares]
  describe 'get_shares test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_standard_offers
  # Get all standard offers
  # 
  # @param [Hash] opts the optional parameters
  # @return [StandardOffers]
  describe 'get_standard_offers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store
  # Get store&#39;s information
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreHeader]
  describe 'get_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_alerts
  # Get store&#39;s alerts
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreAlerts]
  describe 'get_store_alerts test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_category
  # Get the report by category
  # Get the report by category
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByCategoryResponse]
  describe 'get_store_report_by_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_channel
  # Get the report by channel
  # Get the report by channel
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByChannelResponse]
  describe 'get_store_report_by_channel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_day
  # Get the report by day
  # Get the report by day
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByDayResponse]
  describe 'get_store_report_by_day test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_day_export
  # Get the report by day
  # Get the report by day
  # @param store_id Your store identifier
  # @param format 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BeezUPCommonLink3]
  describe 'get_store_report_by_day_export test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_report_by_product
  # Get the report by product
  # Get the report by product
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [ReportByProductResponse]
  describe 'get_store_report_by_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_clicks
  # Get the latest clicks tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The click&#39;s count you want to get
  # @return [TrackedClicks]
  describe 'get_store_tracked_clicks test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_external_orders
  # Get the latest external orders tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The external order&#39;s count you want to get
  # @return [TrackedExternalOrders]
  describe 'get_store_tracked_external_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracked_orders
  # Get the latest orders tracked
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count The order&#39;s count you want to get
  # @return [TrackedOrders]
  describe 'get_store_tracked_orders test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_store_tracking_status
  # Get store tracking synchronization status
  # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are for this store. 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [StoreTrackingStatus]
  describe 'get_store_tracking_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_stores
  # Get store list
  # 
  # @param [Hash] opts the optional parameters
  # @return [Stores]
  describe 'get_stores test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_status
  # Display the synchronization status of the clicks and orders
  # Your clicks and orders are eventually consistent. \\ This operation indicates you at which date the projections are. 
  # @param [Hash] opts the optional parameters
  # @return [TrackingStatus]
  describe 'get_tracking_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_account_info
  # Get user account information
  # 
  # @param [Hash] opts the optional parameters
  # @return [AccountInfo]
  describe 'get_user_account_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_list_group
  # Get list of values related to this group name
  # 
  # @param list_group_name The list group name your want to get
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLOVLink2>]
  describe 'get_user_list_group test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_list_group_names
  # Get list of group of list name
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLOVLink2>]
  describe 'get_user_list_group_names test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_list_names
  # Get all list names
  # 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLOVLink2>]
  describe 'get_user_list_names test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_list_of_values
  # Get the list of values related to this list name
  # 
  # @param list_name The list of value name your want to get
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :accept_language Indicates that the client accepts the following languages.
  # @return [Array<BeezUPCommonListOfValueItem>]
  describe 'get_user_list_of_values test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for harvest_all
  # Send harvest request to all your marketplaces
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'harvest_all test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for harvest_order
  # Send harvest request for a single Order
  # 
  # @param marketplace_technical_code The marketplace technical code
  # @param account_id The account identifier
  # @param beez_up_order_id The BeezUP Order identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'harvest_order test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_activate_auto_import
  # Activate the auto importation of the last successful manual catalog importation.
  # Once you have made your fist manual catalog importation with success, you can call this operation to import it automatically. No parameter required, we know which one it is.
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_activate_auto_import test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_cancel
  # Cancel importation
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_cancel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_commit
  # Commit Importation
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_commit test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_commit_columns
  # Commit columns
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_commit_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_configure_catalog_column
  # Configure catalog column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_configure_catalog_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_configure_remaining_catalog_columns
  # Configure remaining catalog columns
  # This operation should be used after you have mapped the required BeezUP Columns
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_configure_remaining_catalog_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_delete_custom_column
  # Delete Custom Column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_delete_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_custom_column_expression
  # Get the encrypted custom column expression in this importation
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'importation_get_custom_column_expression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_custom_columns
  # Get custom columns currently place in this importation
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [CustomColumns]
  describe 'importation_get_custom_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_detected_catalog_columns
  # Get detected catalog columns during this importation.
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [DetectedCatalogColumns]
  describe 'importation_get_detected_catalog_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_importation_monitoring
  # Get the importation status
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [ImportationMonitoring]
  describe 'importation_get_importation_monitoring test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_manual_update_last_input_config
  # Get the last input configuration
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [LastManualImportInputConfiguration]
  describe 'importation_get_manual_update_last_input_config test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_product_sample
  # Get the product sample related to this importation with all columns (catalog and custom)
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param product_sample_index Index of the product sample. Starting from 0 to 99.
  # @param [Hash] opts the optional parameters
  # @return [ProductSample]
  describe 'importation_get_product_sample test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_product_sample_custom_column_value
  # Get product sample custom column value related to this importation.
  # /!\\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param product_sample_index Index of the product sample. Starting from 0 to 99.
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'importation_get_product_sample_custom_column_value test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_get_reportings
  # Get the latest catalog importation reporting
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<ImportationReporting>]
  describe 'importation_get_reportings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_ignore_column
  # Ignore Column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_ignore_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_map_catalog_column
  # Map catalog column to a BeezUP column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The catalog column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_map_catalog_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_map_custom_column
  # Map custom column to a BeezUP column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_map_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_reattend_column
  # Reattend Column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_reattend_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_save_custom_column
  # Create or replace a custom column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_save_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_start_manual_update
  # Start Manual Import
  # 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [Array<BeezUPCommonLink2>]
  describe 'importation_start_manual_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_technical_progression
  # Get technical progression
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param [Hash] opts the optional parameters
  # @return [ImportationTechnicalProgression]
  describe 'importation_technical_progression test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_unmap_catalog_column
  # Unmap catalog column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The catalog column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_unmap_catalog_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for importation_unmap_custom_column
  # Unmap custom column
  # 
  # @param store_id Your store identifier
  # @param execution_id The execution identifier of you catalog importation
  # @param column_id The custom column identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'importation_unmap_custom_column test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logout
  # Log out the current user from go2
  # Log out the current user from go2
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'logout test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for map_channel_catalog_category
  # Map channel catalog category
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'map_channel_catalog_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for map_channel_catalog_columns
  # Configure channel catalog column mappings
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'map_channel_catalog_columns test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_down_rule
  # Move the rule down
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'move_down_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_up_rule
  # Move the rule up
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'move_up_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise
  # Optimise products
  # /!\\ WARNING /!\\ \\ Apply the operation on every product related to this request. \\ This operation is used at the bottom of the analytics page result. 
  # @param store_id Your store identifier
  # @param action_name 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'optimise test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise_by_category
  # Optimise products&#39;s category
  # /!\\ WARNING /!\\ \\ This operation will reenable or disable products&#39;s category for every channel indicated in the body.  
  # @param store_id Your store identifier
  # @param catalog_category_id The category identifier concerned by this optimisation
  # @param action_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
  # @return [nil]
  describe 'optimise_by_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise_by_channel
  # Optimise products&#39;s category
  # /!\\ WARNING /!\\ \\ Apply the operation on every product on this channel. 
  # @param store_id Your store identifier
  # @param channel_id The channel identifier concerned by this optimisation
  # @param action_name 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'optimise_by_channel test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for optimise_by_product
  # Optimise products
  # /!\\ WARNING /!\\ \\ This operation will reenable or disable this product for every channel indicated in the body.  
  # @param store_id Your store identifier
  # @param product_id The product identifier concerned by this optimisation
  # @param action_name 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :request The channel identifier list concerned by this optimisation
  # @return [nil]
  describe 'optimise_by_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for override_channel_catalog_product_overrides
  # Override channel catalog product values
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param product_id The product identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'override_channel_catalog_product_overrides test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactivate_current_contract
  # Reactivate your terminated contract.
  # By calling this operation you can re-enable the auto renewal.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reactivate_current_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reenable_channel_catalog_product
  # Reenable channel catalog product
  # By default a all your catalog products are exposed to the channel. You can reenable a product by using this operation. /!\\ In case of massive optimisation we recommand you to use the analytics api 
  # @param channel_catalog_id The channel catalog identifier
  # @param product_id The product identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'reenable_channel_catalog_product test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for resend_email_activation
  # Resend email activation
  # 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'resend_email_activation test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_rule
  # Run rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'run_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for run_rules
  # Run all rules for this store
  # 
  # @param store_id Your store identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'run_rules test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_company_info
  # Change company information
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_company_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_credit_card_info
  # Save user credit card info
  # 
  # @param request Credit card info
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_credit_card_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_personal_info
  # Save user personal information
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_personal_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_profile_picture_info
  # Change user picture information
  # 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_profile_picture_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_report_filter
  # Save the report filter
  # 
  # @param store_id Your store identifier
  # @param report_filter_id Your report filter identifier
  # @param report_filter 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_report_filter test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for save_store_alert
  # Save store alert
  # 
  # @param store_id Your store identifier
  # @param alert_id 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'save_store_alert test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_channel_catalog_marketplace_settings
  # Save new marketplace settings for a channel catalog
  # Allow you to configure your marketplace settings.  Partial update accepted. 
  # @param channel_catalog_id Channel Catalog Id to query
  # @param model Settings to save
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'set_channel_catalog_marketplace_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_merchant_order_info
  # Set an Order&#39;s merchant information
  # 
  # @param marketplace_technical_code The marketplace technical code
  # @param account_id The account identifier
  # @param beez_up_order_id The BeezUP Order identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'set_merchant_order_info test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_merchant_order_info_list
  # Send a batch of operations to set an Order&#39;s merchant information
  # The purpose of this operation is to reduce the amount of request to the API.
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [BatchOrderOperationResponse]
  describe 'set_merchant_order_info_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for share
  # Share a store to another user
  # 
  # @param store_id Your store identifier
  # @param email Your friend&#39;s email
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'share test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for terminate_current_contract
  # Schedule termination of your current contract at the end of the commitment.
  # By default your contract are automatically renew. By calling this operation you can disable the auto renewal.
  # @param request Indicate the termination reason
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'terminate_current_contract test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unmap_channel_catalog_category
  # Unmap channel catalog category
  # 
  # @param channel_catalog_id The channel catalog identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'unmap_channel_catalog_category test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_rule
  # Update Rule
  # 
  # @param store_id Your store identifier
  # @param rule_id Your rule identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_rule test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_store
  # Update some store&#39;s information.
  # Update some store&#39;s information. FYI, you cannot change the country. 
  # @param store_id Your store identifier
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_store test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
