=begin
#Customer

#This API will gives you the ability to : - manage your account - manage your stores - shares your stores with your friends - manage your contracts - access to your invoices 

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient
  # Describe the pricing information related to the offer.
  class ContractMoneyInfo
    # The amount excluding taxes and excluding code promo discount including billing period discount.
    attr_accessor :amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount

    # The amount excluding taxes including discounts.
    attr_accessor :amount_excluding_taxes_including_discounts

    # The taxes excluding discount including billing period discount.
    attr_accessor :amount_taxes_excluding_discount_including_billing_period_discount

    # The amount including taxes excluding discount including billing period discount.
    attr_accessor :amount_including_taxes_excluding_discount_including_billing_period_discount

    attr_accessor :currency_code

    # The VAT percent.
    attr_accessor :vat_percent

    # The amount excluding taxes including discounts per month.
    attr_accessor :amount_excluding_taxes_including_discounts_per_month

    # The amount excluding taxes and excluding discounts.
    attr_accessor :amount_excluding_taxes_and_excluding_discounts

    # Taxes including discounts.
    attr_accessor :amount_taxes_including_discounts

    # The amount including taxes including discounts.
    attr_accessor :amount_including_taxes_including_discounts

    # The initial offer fixed price.
    attr_accessor :initial_offer_fixed_price


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount' => :'amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount',
        :'amount_excluding_taxes_including_discounts' => :'amountExcludingTaxesIncludingDiscounts',
        :'amount_taxes_excluding_discount_including_billing_period_discount' => :'amountTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        :'amount_including_taxes_excluding_discount_including_billing_period_discount' => :'amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount',
        :'currency_code' => :'currencyCode',
        :'vat_percent' => :'vatPercent',
        :'amount_excluding_taxes_including_discounts_per_month' => :'amountExcludingTaxesIncludingDiscountsPerMonth',
        :'amount_excluding_taxes_and_excluding_discounts' => :'amountExcludingTaxesAndExcludingDiscounts',
        :'amount_taxes_including_discounts' => :'amountTaxesIncludingDiscounts',
        :'amount_including_taxes_including_discounts' => :'amountIncludingTaxesIncludingDiscounts',
        :'initial_offer_fixed_price' => :'initialOfferFixedPrice'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount' => :'Float',
        :'amount_excluding_taxes_including_discounts' => :'Float',
        :'amount_taxes_excluding_discount_including_billing_period_discount' => :'Float',
        :'amount_including_taxes_excluding_discount_including_billing_period_discount' => :'Float',
        :'currency_code' => :'BeezUPCommonCurrencyCode',
        :'vat_percent' => :'Float',
        :'amount_excluding_taxes_including_discounts_per_month' => :'Float',
        :'amount_excluding_taxes_and_excluding_discounts' => :'Float',
        :'amount_taxes_including_discounts' => :'Float',
        :'amount_including_taxes_including_discounts' => :'Float',
        :'initial_offer_fixed_price' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount')
        self.amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount = attributes[:'amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount']
      end

      if attributes.has_key?(:'amountExcludingTaxesIncludingDiscounts')
        self.amount_excluding_taxes_including_discounts = attributes[:'amountExcludingTaxesIncludingDiscounts']
      end

      if attributes.has_key?(:'amountTaxesExcludingDiscountIncludingBillingPeriodDiscount')
        self.amount_taxes_excluding_discount_including_billing_period_discount = attributes[:'amountTaxesExcludingDiscountIncludingBillingPeriodDiscount']
      end

      if attributes.has_key?(:'amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount')
        self.amount_including_taxes_excluding_discount_including_billing_period_discount = attributes[:'amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount']
      end

      if attributes.has_key?(:'currencyCode')
        self.currency_code = attributes[:'currencyCode']
      end

      if attributes.has_key?(:'vatPercent')
        self.vat_percent = attributes[:'vatPercent']
      end

      if attributes.has_key?(:'amountExcludingTaxesIncludingDiscountsPerMonth')
        self.amount_excluding_taxes_including_discounts_per_month = attributes[:'amountExcludingTaxesIncludingDiscountsPerMonth']
      end

      if attributes.has_key?(:'amountExcludingTaxesAndExcludingDiscounts')
        self.amount_excluding_taxes_and_excluding_discounts = attributes[:'amountExcludingTaxesAndExcludingDiscounts']
      end

      if attributes.has_key?(:'amountTaxesIncludingDiscounts')
        self.amount_taxes_including_discounts = attributes[:'amountTaxesIncludingDiscounts']
      end

      if attributes.has_key?(:'amountIncludingTaxesIncludingDiscounts')
        self.amount_including_taxes_including_discounts = attributes[:'amountIncludingTaxesIncludingDiscounts']
      end

      if attributes.has_key?(:'initialOfferFixedPrice')
        self.initial_offer_fixed_price = attributes[:'initialOfferFixedPrice']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount == o.amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount &&
          amount_excluding_taxes_including_discounts == o.amount_excluding_taxes_including_discounts &&
          amount_taxes_excluding_discount_including_billing_period_discount == o.amount_taxes_excluding_discount_including_billing_period_discount &&
          amount_including_taxes_excluding_discount_including_billing_period_discount == o.amount_including_taxes_excluding_discount_including_billing_period_discount &&
          currency_code == o.currency_code &&
          vat_percent == o.vat_percent &&
          amount_excluding_taxes_including_discounts_per_month == o.amount_excluding_taxes_including_discounts_per_month &&
          amount_excluding_taxes_and_excluding_discounts == o.amount_excluding_taxes_and_excluding_discounts &&
          amount_taxes_including_discounts == o.amount_taxes_including_discounts &&
          amount_including_taxes_including_discounts == o.amount_including_taxes_including_discounts &&
          initial_offer_fixed_price == o.initial_offer_fixed_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [amount_excluding_taxes_and_excluding_code_promo_discount_including_billing_period_discount, amount_excluding_taxes_including_discounts, amount_taxes_excluding_discount_including_billing_period_discount, amount_including_taxes_excluding_discount_including_billing_period_discount, currency_code, vat_percent, amount_excluding_taxes_including_discounts_per_month, amount_excluding_taxes_and_excluding_discounts, amount_taxes_including_discounts, amount_including_taxes_including_discounts, initial_offer_fixed_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
