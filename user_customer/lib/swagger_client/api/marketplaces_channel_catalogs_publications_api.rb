=begin
#BeezUP API

#This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class MarketplacesChannelCatalogsPublicationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Fetch the publication history for an account, sorted by descending start date
    # 
    # @param marketplace_technical_code Marketplace Technical Code to query (required)
    # @param account_id Account Id to query (required)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_catalog_id Channel Catalog Id by which to filter (optional)
    # @option opts [Integer] :count Amount of entries to fetch (optional, default set to 10) (default to 10)
    # @option opts [Array<String>] :publication_types Publication types by which to filter (optional)
    # @return [AccountPublications]
    def get_publications(marketplace_technical_code, account_id, opts = {})
      data, _status_code, _headers = get_publications_with_http_info(marketplace_technical_code, account_id, opts)
      return data
    end

    # Fetch the publication history for an account, sorted by descending start date
    # 
    # @param marketplace_technical_code Marketplace Technical Code to query (required)
    # @param account_id Account Id to query (required)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_catalog_id Channel Catalog Id by which to filter (optional)
    # @option opts [Integer] :count Amount of entries to fetch (optional, default set to 10)
    # @option opts [Array<String>] :publication_types Publication types by which to filter (optional)
    # @return [Array<(AccountPublications, Fixnum, Hash)>] AccountPublications data, response status code and response headers
    def get_publications_with_http_info(marketplace_technical_code, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: MarketplacesChannelCatalogsPublicationsApi.get_publications ..."
      end
      # verify the required parameter 'marketplace_technical_code' is set
      fail ArgumentError, "Missing the required parameter 'marketplace_technical_code' when calling MarketplacesChannelCatalogsPublicationsApi.get_publications" if marketplace_technical_code.nil?
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling MarketplacesChannelCatalogsPublicationsApi.get_publications" if account_id.nil?
      if !opts[:'count'].nil? && opts[:'count'] > 100
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling MarketplacesChannelCatalogsPublicationsApi.get_publications, must be smaller than or equal to 100.'
      end

      if !opts[:'count'].nil? && opts[:'count'] < 10
        fail ArgumentError, 'invalid value for "opts[:"count"]" when calling MarketplacesChannelCatalogsPublicationsApi.get_publications, must be greater than or equal to 10.'
      end

      if opts[:'publication_types'] && !opts[:'publication_types'].all?{|item| ['PublishProducts', 'PublishOffers', 'Unpublish'].include?(item)}
        fail ArgumentError, 'invalid value for "publication_types", must include one of PublishProducts, PublishOffers, Unpublish'
      end
      # resource path
      local_var_path = "/v2/user/marketplaces/channelcatalogs/publications/{marketplaceTechnicalCode}/{accountId}/history".sub('{format}','json').sub('{' + 'marketplaceTechnicalCode' + '}', marketplace_technical_code.to_s).sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'channelCatalogId'] = opts[:'channel_catalog_id'] if !opts[:'channel_catalog_id'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'publicationTypes'] = @api_client.build_collection_param(opts[:'publication_types'], :csv) if !opts[:'publication_types'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountPublications')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketplacesChannelCatalogsPublicationsApi#get_publications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
