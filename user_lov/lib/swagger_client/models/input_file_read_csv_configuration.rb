=begin
#Catalogs

#This API allows you to manage your catalogs

OpenAPI spec version: 2.0
Contact: support@beezup.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module SwaggerClient
  # The CSV file description
  class InputFileReadCsvConfiguration
    # Indicate if the csv file contains the column name at the first row
    attr_accessor :has_header_record

    # Indicate if the importation should not use the csv column name from the file
    attr_accessor :ignore_header_record

    # Indicate the separator of the values in the CSV file. Generally \";\"
    attr_accessor :csv_separator

    # Indicate the text qualifier of the CSV file. Generally the value is \"
    attr_accessor :csv_text_qualifier


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'has_header_record' => :'hasHeaderRecord',
        :'ignore_header_record' => :'ignoreHeaderRecord',
        :'csv_separator' => :'csvSeparator',
        :'csv_text_qualifier' => :'csvTextQualifier'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'has_header_record' => :'BOOLEAN',
        :'ignore_header_record' => :'BOOLEAN',
        :'csv_separator' => :'String',
        :'csv_text_qualifier' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'hasHeaderRecord')
        self.has_header_record = attributes[:'hasHeaderRecord']
      else
        self.has_header_record = true
      end

      if attributes.has_key?(:'ignoreHeaderRecord')
        self.ignore_header_record = attributes[:'ignoreHeaderRecord']
      else
        self.ignore_header_record = false
      end

      if attributes.has_key?(:'csvSeparator')
        self.csv_separator = attributes[:'csvSeparator']
      else
        self.csv_separator = ";"
      end

      if attributes.has_key?(:'csvTextQualifier')
        self.csv_text_qualifier = attributes[:'csvTextQualifier']
      else
        self.csv_text_qualifier = "\""
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @has_header_record.nil?
        invalid_properties.push("invalid value for 'has_header_record', has_header_record cannot be nil.")
      end

      if @ignore_header_record.nil?
        invalid_properties.push("invalid value for 'ignore_header_record', ignore_header_record cannot be nil.")
      end

      if @csv_separator.nil?
        invalid_properties.push("invalid value for 'csv_separator', csv_separator cannot be nil.")
      end

      if @csv_text_qualifier.nil?
        invalid_properties.push("invalid value for 'csv_text_qualifier', csv_text_qualifier cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @has_header_record.nil?
      return false if @ignore_header_record.nil?
      return false if @csv_separator.nil?
      return false if @csv_text_qualifier.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          has_header_record == o.has_header_record &&
          ignore_header_record == o.ignore_header_record &&
          csv_separator == o.csv_separator &&
          csv_text_qualifier == o.csv_text_qualifier
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [has_header_record, ignore_header_record, csv_separator, csv_text_qualifier].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
